@model TRAILSWEB.Models.ResetPassword
@{string appTitle = @System.Configuration.ConfigurationManager.AppSettings["ApplicationTitle"].ToString();}

@{
    ViewBag.Title = "Reset Password";
    ViewBag.Action = "ResetPassword";
    ViewBag.Controller = "Account";
}

@if (ViewBag.MaintenanceMessage != null)
{
    <div class="alert alert-danger">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
        @Html.Raw(ViewBag.MaintenanceMessage)
    </div>
}
@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
        @Html.Raw(ViewBag.ErrorMessage)
    </div>
}
@if (ViewBag.WarningMessage != null)
{
    <div class="alert alert-warning">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
        @Html.Raw(ViewBag.WarningMessage)
    </div>
}
<div class="container">

    @using (Html.BeginForm("ResetPassword", "Account", FormMethod.Post, new { @name = "resetPasswordForm", @id = "resetPasswordForm", @class = "form-horizontal", @role = "form" }))
    {
        @*@Html.AntiForgeryToken()*@
    <div id="resetPasswordFormData" class="mainbox col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2">
        <div class="panel panel-info">
            <div class="panel-heading">
                <div class="panel-title">Reset Password</div>
                @*<div style="float:right; font-size: 80%; position: relative; top:-10px">@Html.ActionLink("Login", "Login", null, new { @style = "color: #fff;" })</div>*@
            </div>
            <div class="panel-body">
                @{string messages = string.Empty;}
                @if (!ViewData.ModelState.IsValid)
                {
                    messages = string.Join("<br />", ViewData.ModelState.Values
                        .SelectMany(x => x.Errors)
                        .Select(x => x.ErrorMessage));
                    <div id="login-alert" class="alert alert-danger col-sm-12">
                        <i class="fa fa-exclamation-triangle" aria-hidden="true"></i> @Html.Raw(HttpUtility.HtmlDecode(@messages))
                    </div>
                }

                @if (ViewBag.AlertMessage != null)
                {
                    <div class="forgot-username-message">
                        <div class="alert alert-warning">
                            <i class="fa fa-exclamation-triangle" aria-hidden="true"></i> @Html.Raw(ViewBag.AlertMessage)
                        </div>
                    </div>
                }
                <div class="panel-body">
                    @Html.HiddenFor(m => m.GUID, new { Value = Model.GUID })
                    @*<div class="form-group">
                        <label for="Pin">Account Pin:</label>
                        <div style="margin-bottom: 25px" class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-cog"></i></span>
                            @Html.TextBoxFor(m => m.Pin, htmlAttributes: new { @class = "form-control", @maxlength = "4", @type = "number", placeholder = "Your E-PASS Account Pin..." })
                        </div>
                    </div>
                    <div class="inputSeperator">
                        <h5 class="centeredLine"><span>Or</span></h5>
                    </div>
                    <div class="form-group">
                        <label for="LicenseLastFive">Driver's License Last 5 characters:</label>
                        <div style="margin-bottom: 25px" class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                            @Html.TextBoxFor(m => m.LicenseLastFive, htmlAttributes: new { @class = "form-control", @maxlength = "5", autocomplete = "off", placeholder = "Your Last Five Driver's License Characters..." })
                        </div>
                    </div>
                    <div class="inputSeperator">
                        <h5 class="centeredLine"><span>And</span></h5>
                    </div>*@
                    <div class="form-group">
                        <label for="NewPassword">New Password:</label>
                        @*<a id="passwordHelp" class="info help helpPopOnTop" data-toggle="popover" data-content="Password must be at least 8 characters in length and a combination of letters, numbers and special characters with NO spaces." style="border:none;background:none;color:#337ab7;" data-original-title="" title="Password Requirements"><i class="material-icons">help</i></a>*@
                        <div style="margin-bottom: 25px" class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                            @Html.PasswordFor(m => m.NewPassword, htmlAttributes: new { @class = "form-control cfxPasswordPreference cfxCapslockCheck", @maxlength = "15", autocomplete = "off", placeholder = "Your New Password..." })
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="ConfirmNewPassword">Confirm Password:</label>
                        @*<a id="confirmPasswordHelp" class="info help helpPopOnTop" data-toggle="popover" data-content="Password must be at least 8 characters in length and a combination of letters, numbers and special characters with NO spaces." style="border:none;background:none;color:#337ab7;" data-original-title="" title="Password Requirements"><i class="material-icons">help</i></a>*@
                        <div style="margin-bottom: 25px" class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                            @Html.PasswordFor(m => m.ConfirmNewPassword, htmlAttributes: new { @class = "form-control", @maxlength = "15", autocomplete = "off", placeholder = "Confirm New Password..." })
                        </div>
                    </div>
                </div>

            </div>
            <div class="panel-footer">
                <button type="submit" id="resetPassword" name="resetPassword" class="btn btn-primary"><span class="fa fa-refresh" aria-hidden="true"></span> Reset Password</button>
            </div>
        </div>
    </div>
    }
</div>

@section Scripts {
    <script type="text/javascript" src="~/Scripts/controllers/account/accountController.js"></script>
    <script type="text/javascript">
        $(function () {
            var formIsValid = false;

            //var pwStrenthMeterDestroyed = false;

            //$('#NewPassword').blur(function () {
            //    $(this).popover('destroy');

            //    pwStrenthMeterDestroyed = true;
            //});

            //$('#NewPassword').focus(function () {
            //    if (pwStrenthMeterDestroyed == true) {
            //        // Initialize Password Fields
            //        $(':Password').not('#ConfirmNewPassword').pwstrength(options);
            //    }
            //});

            //// Initialize Password Fields
            //$(':Password').not('#ConfirmNewPassword').pwstrength(options);

            $('#Pin').focus();

            $('#resetPassword').click(function (event) {
                event.preventDefault();

            	// validate the password for no spaces
                var regpass = new RegExp('^[^ ]{8,32}$');

                var pass1 = $('#NewPassword').val();
                var pass2 = $('#ConfirmNewPassword').val();
                var message;
                var showMessage = false;

                if (!regpass.test(pass1) && !regpass.test(pass2)) {
                	message = "Password and Confirm Password cannot contain spaces."
                	showMessage = true;
                } else if (!regpass.test(pass1)) {
                	message = "Password cannot contain spaces."
                	showMessage = true;
                }
                else if (!regpass.test(pass2)) {
                	message = "Confirm Password cannot contain spaces."
                	showMessage = true;
                }

                if (showMessage) {
                	// show message                	
                	$.notify({
                		// Options
                		icon: 'fa fa-exclamation-triangle danger',
                		message: message
                	},
					{
						// Settings
						type: 'warning',
						delay: 2000,
						z_index: 3000
					});

                	return false;
                }
                // Validate Form
                formIsValid = accountController.validatePasswordReset(event);

                if (formIsValid) {
                    // Submit Request
                    $('#resetPasswordForm').submit();
                }
            });
        });
    </script>
}