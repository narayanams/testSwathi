@* Reusable for Payment Data *@
@using TRAILSWEB.Helpers
@model  TRAILSWEB.Models.PaymentInformation

@{
    var accountType = ViewData["AccountType"] == null || ViewData["AccountType"].ToString() == "Private Std" ? "Private Std" : "Commercial";

}
<div class="form-group">
@{var paymentAmountLabel = Model.TransponderPrice != null ? "Grand Total" : "Amount";}
<label for="PaymentAmount" class="col-sm-12">@paymentAmountLabel:</label>
<div class="col-sm-5 col-xs-12">
    <div class="input-group">
        <span class="input-group-addon success">$</span>
        @Html.TextBoxFor(m => m.PrepaidTollsAmount, new { @class = "form-control always-enable", @style = "border-top-left-radius:0!important;border-bottom-left-radius:0!important;", @type = "number", @min = "10", @max = "10000", @maxlength = "7", @step = "any", Value = 10, @aria_label = "Amount (to nearest dollar)", @placeholder = "Amount (to nearest dollar)" })
        @Html.HiddenFor(m => m.PrepaidTollsAmount)
        <a id="paymentAmountHelp" class="input-group-addon info help" rel="popover" data-toggle="popover" data-content="" style="border:none;background:none;color:#337ab7;">
            <i class="material-icons">help</i>
        </a>
    </div>
</div>
</div>


@if (!Model.UseCardOnFile)
{
<div class="checkbox CCPayment checkBoxStyle purpleCheckbox" id="saveCardOnFileOptionDiv" >
    <label id="saveCardOnFileOptionLabel" for="SaveCardOnFile" class='active' >
        @Html.CheckBox("SaveCardOnFile", Model.SaveCardOnFile, new { @style = "display: none" })
        <div class="customCheckbox"></div>
        <!--<i class="fa fa-square fa-2x"></i><i class="fa fa-check-square fa-2x"></i>-->
        <span>
        Save Card for future use
        </span>
    </label>
</div>
}

@{
    var useCardOnFile = (Model.UseCardOnFile == true) ? "True" : "False";

    var displayCardMinPaymentCardReplenishAmount = Model.MinReplenishAmount;
    if (accountType == "Private Std")
    {
        displayCardMinPaymentCardReplenishAmount = Model.DisplayMinReplenishAmount;

    }
}

<div id="allowAutoBillingDiv">
    <div class="checkbox CCPayment checkBoxStyle purpleCheckbox">
        <label id="AutoReloadLabel" for="AutoReload" class='active'>
            @Html.CheckBox("AutoReload", Model.AutoReload, new { @style = "display: none" })
            <div class="customCheckbox"></div>
            <span>
                Allow automatic billing
            </span>

        </label>
        <a id="automaticBillingHelp" class="info help" rel="popover" data-toggle="popover" title="" data-content="" style="padding-top:5px; color:#337ab7;">
            <i class="material-icons">help</i>
        </a>

    </div>

    <div class="row nomargin col-sm-8 col-xs-8 hidden" id="divReplenishAmount">
        <div>
            <div class="form-group row" id="repAmountRow" style="display: block;">
                <!--<div class="col-sm-12 col-xs-12"> <label>Replenish Amount: </label><span id="lblMinReplAmt"> $@(Model.ReplenishAmount == 0 ?  @displayCardMinPaymentCardReplenishAmount.ToString(): Model.ReplenishAmount.ToString("F"))</span> </div>-->
                <div class="col-sm-12 col-xs-12"> <label>Replenish Amount: </label><span id="lblMinReplAmt"> $@(Model.ReplenishAmount > 0 ? Model.ReplenishAmount.ToString("F") : Model.MinReplenishAmount.ToString("F"))</span> </div>
            </div>
            <div class="form-group row" id="lowAmountRow" style="display: block;">
                <div class="col-sm-12 col-xs-12"> <label>Low Balance Amount: </label><span id="lblMinLowBalAmt"> $@(Model.LowBalanceAmount > 0 ? Model.LowBalanceAmount.ToString("F") : Model.MinLowBalanceAmount.ToString("F"))</span> </div>
            </div>
        </div>
    </div>
</div>

