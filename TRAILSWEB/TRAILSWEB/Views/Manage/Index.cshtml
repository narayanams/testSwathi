@using TRAILSWEB.Models;
@using System.Web.Script.Serialization;

@model TRAILSWEB.Models.ManageModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html lang="en">
@{
    var request = HttpContext.Current.Request;
    var controller = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();
    var appUrl = HttpRuntime.AppDomainAppVirtualPath;
    var baseUrl = string.Format("{0}://{1}{2}", request.Url.Scheme, request.Url.Authority, appUrl);
    var corporateUrl = System.Configuration.ConfigurationManager.AppSettings.Get("CorporateBaseUrl");
    var epassUrl = System.Configuration.ConfigurationManager.AppSettings.Get("EPASSBaseUrl");
    var sessionMessageNoCart = System.Configuration.ConfigurationManager.AppSettings.Get("SessionConfirmationNoCart");
    var sessionMessageWithCart = System.Configuration.ConfigurationManager.AppSettings.Get("SessionConfirmationWithCart");
    var defaultState = string.IsNullOrEmpty(Model.ContactInfo.State) ? "FL" : Model.ContactInfo.State;
    var webBalance = Model.AccountInfo.AccountBalence;

    //Sitewide settings getting populated from Singlton class, this will be called once everytime we restart the IIS/AppPool
    SiteWideSettings siteWidesettings = SiteWideSettings.Instance;

    //PerSessionSettings getting populated from respective controllers, specially when user logges in
    PerSessionSettings perSessionSettings = PerSessionSettings.Instance;


    var minPendingTranCount = 0;
    var maxPendingTranCount = Model.AccountInfo.HasPendingTransactions? (Model.AccountInfo.PendingTransactionsEnd - Model.AccountInfo.PendingTransactionsStart).TotalDays : 0 ;
    var minPendingTranDate = Model.AccountInfo.HasPendingTransactions ? Model.AccountInfo.PendingTransactionsStart.Date.ToShortDateString() : DateTime.MinValue.Date.ToShortDateString();
}
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Fav and Touch Icons -->
    <link href="~/Content/img/apple-touch-icon-57x57.png" rel="apple-touch-icon" sizes="57x57">
    <link href="~/Content/img/apple-touch-icon-114x114.png" rel="apple-touch-icon" sizes="114x114">
    <link href="~/Content/img/apple-touch-icon-72x72.png" rel="apple-touch-icon" sizes="72x72">
    <link href="~/Content/img/apple-touch-icon-144x144.png" rel="apple-touch-icon" sizes="144x144">
    <link href="~/Content/img/apple-touch-icon-60x60.png" rel="apple-touch-icon" sizes="60x60">
    <link href="~/Content/img/apple-touch-icon-120x120.png" rel="apple-touch-icon" sizes="120x120">
    <link href="~/Content/img/apple-touch-icon-76x76.png" rel="apple-touch-icon" sizes="76x76">
    <link href="~/Content/img/apple-touch-icon-152x152.png" rel="apple-touch-icon" sizes="152x152">
    <link href="~/Content/img/favicon-196x196.png" rel="icon" type="image/png" sizes="196x196">
    <link href="~/Content/img/favicon-160x160.png" rel="icon" type="image/png" sizes="160x160">
    <link href="~/Content/img/favicon-96x96.png" rel="icon" type="image/png" sizes="96x96">
    <link href="~/Content/img/favicon-16x16.png" rel="icon" type="image/png" sizes="16x16">
    <link href="~/Content/img/favicon-32x32.png" rel="icon" type="image/png" sizes="32x32">

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <meta name="msapplication-TileColor" content="#446130">
    <meta name="msapplication-TileImage" content="~/Content/img/mstile-144x144.png">
    <title>E-PASS - Reload and GO!</title>

    <!-- Fonts -->
    <link rel="stylesheet" href="~/Content/webfonts.css" />
    <link rel="stylesheet" href="~/Content/font-awesome-animation.min.css" />

    <!-- Bootstrap -->
    <link rel="stylesheet" href="~/Scripts/vendor/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/Scripts/vendor/bootstrap/css/bootstrap-slider.css" />

    <link href="~/Scripts/vendor/bootstrap/css/epass-theme.css" rel="stylesheet">
    @*<link rel="stylesheet" href="~/css/bootstrap.css" /> <!-- Bootstrap Theme -->*@
    <link rel="stylesheet" href="~/css/ie10-viewport-bug-workaround.css" />

    <!-- Bootstrap Plugins -->
    <link rel="stylesheet" href="~/Scripts/vendor/bootstrap/plugins/css/footable.bootstrap.min.css" />
    <link rel="stylesheet" href="~/Scripts/vendor/bootstrap/plugins/css/bootstrap-formhelpers.min.css" />
    <link rel="stylesheet" href="~/Scripts/vendor/bootstrap/plugins/css/bootstrap-toggle.min.css" />
    <link rel="stylesheet" href="~/Scripts/vendor/bootstrap/plugins/css/animate.css" />
    <link rel="stylesheet" href="~/Scripts/vendor/bootstrap/plugins/css/notify.css" />
    <!-- Application Styles -->
    <link rel="stylesheet" href="~/css/dashboard.css" />
    <link rel="stylesheet" href="~/css/custom.css" />

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
          <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
        <![endif]-->

    <script type="text/javascript">
        @{
            @:var _BaseUrl = '@baseUrl';
                            @:var _CorporateUrl = '@corporateUrl';
                            @:var _EPASSUrl = '@epassUrl';
                            @:var sessionTimeout = Number(@Session.Timeout);
                        }

        var sessionEndMessage = "Are you sure you want to go so soon?";
        var sessionEndNoCart = null;
        var sessionEndWithCart = null;

        function setBaseUrl(urlPath) {
            _BaseUrl = urlPath
        }

        function getBaseUrl() {
            return _BaseUrl;
        }

        function setCorporateUrl(urlPath) {
            _CorporateUrl = urlPath;
        }

        function getCorporateUrl() {
            return _CorporateUrl;
        }

        function setEPASSUrl(urlPath) {
            _EPASSUrl = urlPath;
        }

        function getEPASSUrl() {
            return _EPASSUrl;
        }

        //debugger;
        //$(function () {
        //    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        //        var target = $(e.target).attr("href")
        //        alert(target);
        //    });
        //})

    </script>
    <style>
        #pendingTransactionSlider .slider-selection {
            background: #5A2270;
            /*                background-image: -webkit-linear-gradient(top, #732B90 0%, #5A2270 100%);
        background-image: -o-linear-gradient(top, #732B90 0%, #5A2270 100%);
        background-image: linear-gradient(to bottom, #732B90 0%, #5A2270 100%)*/

        }

        #pendingTransactionSlider .slider-track-low{
            background: #732B90;
        }

        #pendingTransactionSlider .slider-track-high{
            background: #732B90;
        }

        #pendingTransactionSlider .slider-track {
            background-image: -webkit-linear-gradient(top, #5A2270 0%, #732B90 100%);
            background-image: -o-linear-gradient(top, #5A2270 0%, #732B90 100%);
            background-image: linear-gradient(to bottom, #5A2270 0%, #732B90 100%)
        }

    </style>
    <!-- Google Tag Manager -->
    <script>
        (function (w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })
        (window, document, 'script', 'dataLayer', 'GTM-MGVQR97');
    </script>
    <!-- End Google Tag Manager -->
</head>
<body class="DashboardBody">

<!-- Google Tag Manager (noscript) -->
    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MGVQR97" height="0" width="0" style="display:none;visibility:hidden"></iframe>
    </noscript>
<!-- End Google Tag Manager (noscript) -->

@Html.Hidden("tollTransponderCount")

@*< !--Main Navigation Menu -->*@
@Html.Partial("_TopNavigationBar")

@Html.AntiForgeryToken()

<div class="container-fluid">
<div class="row ">
<div class="col-sm-3 col-md-2 sidebar">
    <ul class="nav nav-sidebar">
        <a href="#" data-toggle="modal" data-target="#AccountSettings_Modal"><li class="active" style="line-height: 1.1; font-family: 'Bree'; font-size: 16px"><span class="fa fa-pencil SideEdit" aria-hidden="true"></span><i class="material-icons">settings</i>&nbsp;Account Settings</li></a>
        @{
            var MonthlyStatementsInd = Model.AccountPreferences.MonthlyEmailStatementType > 0 ? "glyphicon glyphicon-ok green" : "glyphicon glyphicon-remove red";
        }
        <li class="SideBarLI"><span class="@MonthlyStatementsInd"></span>&nbsp; Email Monthly Statement</li>
        @{
            var BalanceNotification = Model.AccountPreferences.OptedForLowBalanceField ? "glyphicon glyphicon-ok green" : "glyphicon glyphicon-remove red";
        }
        <li class="SideBarLI"><span class="@BalanceNotification"></span>&nbsp; Email Balance Notification</li>

        @{
            var securityUsername = Model.SecurityInfo.UserName;
            var securityPassword = Model.SecurityInfo.Password;
            var securitySecretQuestion = Model.SecurityInfo.SecretQuestionId;
            var securitySecretAnswer = Model.SecurityInfo.SecretAnswer;
            var securityPin = Model.SecurityInfo.Pin;
            var securityEmail = Model.SecurityInfo.Email;
        }

        <a href="#" data-toggle="modal" data-target="#AccountSecurity_Modal"><li class="active" style="line-height: 1.1; font-family: 'Bree'; font-size: 16px"><span class="fa fa-pencil SideEdit" aria-hidden="true"></span><i class="material-icons" style="width: 16px">assignment_account</i>&nbsp;&nbsp;Account Security</li></a>
        <li class="SideBarLI">
            <strong>Username:</strong> <br>
            @Html.Raw(@securityUsername)
        </li>
        <li class="SideBarLI">
            <strong>Email Address:</strong> <br>
            @Html.Raw(@securityEmail)
        </li>
        <li class="SideBarLI">
            <strong>Phone Access PIN:</strong> <br>
            @Html.Raw(@securityPin)
        </li>
    </ul>
</div>

<div class="PageHeaders">
    <div class="col-sm-3 col-md-2"></div>
    <div class="col-sm-9 col-md-10 manage-width">
        <div class="col-lg-8 col-md-6 PageTitle manage-title">Manage E-PASS<br/><span class="PageTagline">Manage your account information, check your account balance, view statements and more.</span>
        </div>
        <div class="MiniNavContainer">
            <a class="navigateModules hidden-xs hidden-sm" id="payInvoiceButton">
                <div class="MiniNavButtonContainer">
                    <img src="~/Content/img/Invoice.svg" class="MiniNavButton">
                    <div class="MiniNavName">Pay Invoices</div>
                </div>
            </a>
            <div class="MiniNavButtonContainer">
                <img src="~/Content/img/Manage.svg" class="MiniNavButtonActive"><img src="~/Content/img/RingActive.svg" style="display: none;"/>
                <div class="MiniNavName">Manage <span class="hidden-xs hidden-sm">E-PASS</span>
                </div>
            </div>

            <a class="navigateModules" href="~/Replenish">
                <div class="MiniNavButtonContainer">
                    <img src="~/Content/img/Reload.svg" class="MiniNavButton">
                    <div class="MiniNavName">Reload <span class="hidden-xs hidden-sm">E-PASS</span>
                    </div>
                </div>
            </a>

            <a class="navigateModules" href="~/Activate">
                <div class="MiniNavButtonContainer">
                    <img src="~/Content/img/Activate.svg" class="MiniNavButton">
                    <div class="MiniNavName">Activate <span class="hidden-xs hidden-sm">E-PASS</span>
                    </div>
                </div>
            </a>

            <a class="navigateModules" href="~/GetEpass">
                <div class="MiniNavButtonContainer">
                    <img src="~/Content/img/Get.svg" class="MiniNavButton">
                    <div class="MiniNavName">Get <span class="hidden-xs hidden-sm">E-PASS</span>
                    </div>
                </div>
            </a>

        </div>
    </div>
</div>

<div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main manage-width">
@{ var balanceStyleClass = Model.AccountInfo.AccountBalence > 0 ? "Balance" : "LowBalance"; }

<div class="row nomargin">
    @{
        if (Model.AccountAlerts.Any())
        {
            <div class="alert alert-danger alert-sm alert-dismissible col-xs-12 col-sm-12 col-md-6 col-lg-6" role="alert">
                <span class="fa fa-warning fa-lg col-xs-1" style="padding-top: 15px" aria-hidden="true"></span>
                <span class="col-xs-6" style="padding-top: 12px">You have Alerts</span>
                <button type="button" class="col-xs-3 btn btn-sm btn-danger" style="margin-top: 5px; margin-bottom: 5px" data-toggle="modal" data-target="#Alert_Modal">View <span class="hidden-xs hidden-sm"> Details</span></button>
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
        }
    }

    <div class="@balanceStyleClass col-xs-12 col-sm-12 col-md-6 col-lg-6"><span class="BalanceText">Balance:</span>$@Model.AccountInfo.AccountBalence.ToString("N2")</div>
</div>


<div class="row nomargin">
    @if (Model.AccountInfo.HasPendingTransactions)
    {
        <div class="alert alert-danger alert-sm alert-dismissible col-xs-12 col-sm-12 col-md-6 col-lg-6" role="alert">
            <span class="fa fa-warning fa-lg col-xs-1" style="padding-top: 15px" aria-hidden="true"></span>
            <span class="col-xs-6" style="padding-top: 12px">You have backlogged SunPass toll transactions</span>
            <button type="button" class="col-xs-3 btn btn-sm btn-danger" style="margin-top: 5px; margin-bottom: 5px;" data-toggle="modal" data-target="#PendingPayment_Modal"><span class="hidden-xs hidden-sm">View Transactions</span> <span class="show-sm show-xs hidden-md hidden-lg">View</span> </button>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        </div>
    }

</div>


<div class="row nomargin">
    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        <div class="panel panel-info box">
            <div class="panel-heading manage">
                <a href="#" data-toggle="modal" data-target="#Payment_Modal"><span class="EditTextDark">&nbsp;Edit</span><span class="fa fa-pencil edit_graphic" aria-hidden="true"></span></a>
                <h3 class="panel-title"><i class="material-icons">payment</i> Payment Information
                </h3>
            </div>
            <div class="panel-body">
                @{
                    var paymentCardType = Model.PaymentInfo.CreditCardType;
                    var paymentCardNumber = Model.PaymentInfo.CreditCardNumber != null && Model.PaymentInfo.CreditCardNumber.Length >= 4 ? Model.PaymentInfo.CreditCardNumber.Substring(Model.PaymentInfo.CreditCardNumber.Length - 4) : "";
                    var last4 = Model.PaymentInfo.CreditCardNumber != null && Model.PaymentInfo.CreditCardNumber.Length >= 4 ? Model.PaymentInfo.CreditCardNumber.Substring(Model.PaymentInfo.CreditCardNumber.Length - 4) : "";
                    var paymentCardExpirationDate = string.IsNullOrEmpty(Model.PaymentInfo.ExpirationMonth) || string.IsNullOrEmpty(Model.PaymentInfo.ExpirationYear) ? "" : Model.PaymentInfo.ExpirationMonth + "/" + Model.PaymentInfo.ExpirationYear;

                    var paymentAutoBill = Model.PaymentInfo.AutoBillIndicator;

                    if (paymentCardExpirationDate.Equals("01/0001"))
                    {
                        paymentCardExpirationDate = "";
                    }

                    //var paymentCardExpirationDate = Model.PaymentInfo.ExpirationDate;
                    var paymentCardReplenishAmount = Model.PaymentInfo.ReplenishAmount == 0 ? "" : Model.PaymentInfo.ReplenishAmount.ToString("0");
                    var paymentCardLowBalance = Model.PaymentInfo.LowBalanceAmount == 0 ? "" : Model.PaymentInfo.LowBalanceAmount.ToString("0");
                    var minPaymentCardReplenishAmount = Model.PaymentInfo.MinimumReplenishAmount;
                    var minPaymentCardLowBalance = Model.PaymentInfo.MinimumLowBalanceAmount;
                    var displayCardMinPaymentCardReplenishAmount = minPaymentCardReplenishAmount;
                    if (Model.AccountInfo.AccountType == "Private Std")
                    {
                        displayCardMinPaymentCardReplenishAmount = Model.PaymentInfo.DisplayMinReplenishAmount;

                    }
                }

                <ul style="list-style-type: none">
                    <li class="DataLine"><strong>Credit Card Type:</strong> @paymentCardType </li>
                    <li class="DataLine"><strong>Card ending in:</strong> @Html.Raw(@last4)</li>
                    <li class="DataLine"><strong>Expiration Date:</strong> @Html.Raw(@paymentCardExpirationDate) </li>
                    @{
                        if (@paymentAutoBill)
                        {
                            <li class="DataLine"><strong>Replenish Amount:</strong> $@Html.Raw(@paymentCardReplenishAmount) </li>
                        }
                        else
                        {
                            <li class="DataLine"><strong>Replenish Amount:</strong> N/A </li>
                        }

                    }

                    <li class="DataLine"><strong>Low Balance Amount:</strong> $@Html.Raw(@paymentCardLowBalance) </li>
                    <li>
                        <a href="Replenish"><button type="button" class="btn btn-primary btn-payment">Make a Payment</button></a>
                        <button type="button" class="btn btn-info btn-history" data-toggle="modal" data-target="#PaymentHistory_Modal"><span class="hidden-xs hidden-sm hidden-md">View </span>Payment History</button>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        <div class="panel panel-info box MinModuleHeight">
            <div class="panel-heading manage">
                <a href="#" data-toggle="modal" data-target="#Contact_Modal"><span class="EditTextDark">&nbsp;Edit</span><span class="fa fa-pencil edit_graphic" aria-hidden="true"></span></a>
                <h3 class="panel-title"> <i class="material-icons">contacts</i> Contact Information
                </h3>
            </div>
            <div class="panel-body">
                @{
                    var contactAddressLine1 = Model.ContactInfo.AddressLine1;
                    var contactAddressLine2 = Model.ContactInfo.AddressLine2;
                    var contactCity = Model.ContactInfo.City;
                    var contactState = Model.ContactInfo.State;
                    var contactZip = Model.ContactInfo.ZipCode;
                    var contactZipFour = Model.ContactInfo.ZipCodeFour;
                    var contactDayPhone = System.Text.RegularExpressions.Regex.Replace(Model.ContactInfo.DayPhone, @"(\d{3})(\d{3})(\d{4})", "$1-$2-$3");
                    var contactEveningPhone = System.Text.RegularExpressions.Regex.Replace(Model.ContactInfo.EveningPhone, @"(\d{3})(\d{3})(\d{4})", "$1-$2-$3");
                    var contactDayPhoneExt = Model.ContactInfo.DayPhoneExt;


                    var formatedDayPhone = contactDayPhone + (string.IsNullOrEmpty(contactDayPhoneExt) ? "" : " ext: " + contactDayPhoneExt);
                    var formatedCityStateZip = string.Format("{0}, {1} {2}", contactCity, contactState, contactZip);
                }

                <ul style="list-style-type: none">
                    <li class="DataLine"><strong>Address Line 1:</strong> @Html.Raw(@contactAddressLine1)</li>
                    <li class="DataLine"><strong>Address Line 2:</strong> @Html.Raw(@contactAddressLine2)</li>
                    <li class="DataLine"><strong>City, State, ZIP :</strong> @Html.Raw(@formatedCityStateZip)</li>
                    <li class="DataLine"><strong>Primary Phone:</strong> @Html.Raw(@formatedDayPhone)</li>
                    <li class="DataLine"><strong>Secondary Phone:</strong> @Html.Raw(@contactEveningPhone)</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row nomargin">
    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        <div class="panel panel-info box">
            <div class="panel-heading manage">
                @*<a href="#" data-toggle="modal" data-target="#Customer_Modal"><span class="EditTextDark">&nbsp;Edit</span><span class="fa fa-pencil edit_graphic" aria-hidden="true"></span></a>*@
                <h3 class="panel-title"><i class="material-icons">account_circle</i> Customer Information
                </h3>
            </div>
            <div class="panel-body">
                @{
                    //var nameLine = (!string.IsNullOrEmpty(Model.BusinessName)) ? Model.BusinessName : string.Format("{0} {1}", Model.FirstName, Model.LastName);
                    var primaryName = string.Format("{0} {1}", Model.CustomerInfo.PrimaryFirstName, Model.CustomerInfo.PrimaryLastName);
                    var primaryLicense = Model.CustomerInfo.PrimaryLicense != null && Model.CustomerInfo.PrimaryLicense.Length >= 4 ? Model.CustomerInfo.PrimaryLicense.Substring(Model.CustomerInfo.PrimaryLicense.Length - 4) : Model.CustomerInfo.PrimaryLicense;
                    var secondaryName = string.Format("{0} {1}", Model.CustomerInfo.SecondaryFirstName, Model.CustomerInfo.SecondaryLastName);
                    var secondaryLicense = Model.CustomerInfo.SecondaryLicense != null && Model.CustomerInfo.SecondaryLicense.Length >= 4 ? Model.CustomerInfo.SecondaryLicense.Substring(Model.CustomerInfo.SecondaryLicense.Length - 4) : Model.CustomerInfo.SecondaryLicense;


                    string acType = Model.AccountInfo.AccountType;

                    if (acType.ToUpper().Equals("COMMERCIAL STD") || Model.CustomerInfo.IsBusinessAccount)
                    {
                        <ul style="list-style-type: none">
                            <li class="DataLine"><strong>Business Name:</strong> @Html.Raw(@Model.CustomerInfo.BusinessName) </li>
                            <li class="DataLine"><strong>Business Contact Name:</strong> @Html.Raw(@Model.CustomerInfo.BusinessContactName)</li>
                            <li class="DataLine"><strong>TIN:</strong> @Html.Raw(@Model.CustomerInfo.BusinessTIN) </li>
                        </ul>
                    }
                    else
                    {
                        <ul style="list-style-type: none">
                            <li class="DataLine"><strong>Primary Name:</strong> @Html.Raw(@primaryName) </li>
                            <li class="DataLine"><strong>Primary Drivers License:</strong> @Html.Raw(@primaryLicense)</li>
                            <li class="DataLine"><strong>Secondary Name:</strong> @Html.Raw(@secondaryName) </li>
                            <li class="DataLine"><strong>Secondary Drivers License:</strong> @Html.Raw(@secondaryLicense)</li>
                        </ul>
                    }

                }
            </div>
        </div>
    </div>

    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
        <div class="panel panel-info box">
            <div class="panel-heading manage">

                <h3 class="panel-title"><i class="material-icons">info</i> Account Information
                </h3>
            </div>
            <div class="panel-body">
                @{
                    var accountNumber = Model.AccountInfo.AccountNumber;
                    var accountType = Model.AccountInfo.AccountType;
                    var accountOpenedDate = Convert.ToDateTime(Model.AccountInfo.OpenedDate).ToString("MM/dd/yyyy");
                    var accountLastPayment = Convert.ToDateTime(Model.AccountInfo.LastPaymentDate).ToString("MM/dd/yyyy");
                    ;

                }
                <ul style="list-style-type: none">
                    <li class="DataLine"><strong>Account Number:</strong> @Html.Raw(@accountNumber)</li>
                    <li class="DataLine"><strong>Account Type:</strong> @Html.Raw(@accountType)</li>
                    <li class="DataLine"><strong>Valued Member Since:</strong> @Html.Raw(@accountOpenedDate)</li>
                    <li class="DataLine"><strong>Last Payment:</strong> @Html.Raw(@accountLastPayment)</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row nomargin">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="panel panel-info">
            <div class="panel-heading manage">
                <h3 class="panel-title"><i class="material-icons">directions_car</i> E-PASS Transponders
                </h3>
            </div>
            <div class="panel-body">
                <div class="table-responsive">
                    <input type="hidden" id="transponderCount" name="transponderCount" value="@Model.TransponderList.Count()"/>
                    <!-- Customer Account Transponders List -->
                    <table id="transpondersTable" class="table table-striped transpondersTable" data-sorting="true" data-filtering="true" data-paging="true" data-paging-size="5" data-empty="">
                        <thead>
                        <tr>
                            <th data-breakpoints="xs">Vehicle</th>
                            <th data-breakpoints="all" data-type="number">Year</th>
                            <th data-breakpoints="all">Color</th>
                            <th data-breakpoints="all">Transponder Type</th>
                            <th>License Plate</th>
                            <th data-breakpoints="all">Plate Type</th>
                            <th data-breakpoints="all">State Registered</th>
                            <th data-breakpoints="xs" data-type="html">Transponder</th>
                            <th data-breakpoints="xs">Status</th>
                            <th data-type="html" data-sortable="false" data-filterable="false">&nbsp;</th>
                            <th data-type="html" data-sortable="false" data-filterable="false">&nbsp;</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var transponder in Model.TransponderList)
                        {
                            var vehicle = string.Format("{0} {1}", transponder.Make, transponder.Model);
                            <tr data-tag-number="@transponder.TransponderNumber"
                                data-transponder-number="@transponder.TransponderNumber"
                                data-license-plate-number="@transponder.LicensePlateNumber"
                                data-license-state-selected="@transponder.LicenseStateSelected"
                                data-license-plate-type-id="@transponder.LicensePlateTypeId"
                                data-vehicle-make="@transponder.Make"
                                data-vehicle-model="@transponder.Model"
                                data-vehicle-year="@transponder.Year"
                                data-vehicle-color="@transponder.Color"
                                data-vehicle-class="@transponder.Class"
                                data-initial-description="@*transponder.InitialTransponderDescription*@"
                                data-initial-status="@transponder.TransponderStatus"
                                data-initial-status-code="@transponder.TransponderStatusCode"
                                data-state-code="@transponder.StateCode"
                                data-issuing-authority="@transponder.IssuingAuthority" class="clickable">
                                <td class="vehicleMakeModel" data-vehicle-make="@transponder.Make" data-vehicle-model="@transponder.Model">@vehicle</td>
                                <td class="vehicleYear" data-value="@transponder.Year">@transponder.Year</td>
                                <td class="vehicleColor" data-value="@transponder.Color">@transponder.Color</td>
                                <td class="vehicleTransponderTypeDesc" data-value="@transponder.ShortDescription"></td>
                                <td class="vehicleLicensePlate" data-value="@transponder.LicensePlateNumber">@transponder.LicensePlateNumber</td>
                                <td class="vehicleLicensePlateType" data-value="@transponder.LicensePlateType">@transponder.LicensePlateType</td>
                                <td class="vehicleRegisteredState" data-value="@transponder.LicenseStateSelected">@transponder.LicenseStateSelected</td>
                                @if (transponder.TransponderStatusCode == "P" || transponder.TransponderStatusCode == "O" || transponder.TransponderStatusCode == "R")
                                {

                                    var imagePath = (string.IsNullOrEmpty(transponder.ImagePath)) ? string.Format("transponder-{0}.png", transponder.TransponderType.ToString()) : transponder.ImagePath;

                                    <td class="vehicleTransponderNumber" data-sort-value="@transponder.TransponderType" nowrap><img height="32" width="32" style="vertical-align: text-top; display: inline !important;" src="@imagePath" class="img-responsive" alt="@transponder.ShortDescription" title="@transponder.ShortDescription"/>&nbsp;@transponder.ShortDescription &nbsp;&nbsp;</td>
                                }
                                else
                                {
                                    <td>@transponder.TransponderNumber</td>
                                }

                                @if (transponder.TransponderStatusCode == "A")
                                {
                                    <td data-sort-value="@transponder.TransponderStatusCode" data-filter-value="@transponder.TransponderStatusCode" class="green">@transponder.TransponderStatus</td>

                                    <td>
                                        <a class="btn btn-link footableButton replaceTransRow" data-replace-tag="@transponder.TransponderNumber" data-replace-type="@transponder.TransponderType" data-activity-type="@((int) TRAILSWEB.Models.CartActivityType.Replace)" data-toggle="modal" data-target='#ReplaceTransponders_Modal' data-id="@transponder.TransponderNumber" href="#deleteconfirmationmodal">
                                            <i class="material-icons">loop</i>
                                            <span class="TableButtonNames">&nbsp;Replace</span>
                                        </a>
                                    </td>
                                    <td>
                                        <button class="btn btn-link footableButton replaceTagButton" data-replace-tag="@transponder.TransponderNumber" data-replace-type="@transponder.TransponderType" data-activity-type="@((int) TRAILSWEB.Models.CartActivityType.Replace)" data-toggle="modal" data-target='#EditTransponders_Modal'>
                                            <i class="material-icons">create</i>
                                            <span class="TableButtonNames">&nbsp;Edit</span>
                                        </button>
                                    </td>
                                                        @*<td>
                                                                <a class="btn btn-danger deleteTransRow" data-toggle="modal" data-target='#deleteConfirmationModal' data-id="@transponder.TransponderNumber" href="#deleteconfirmationmodal">
                                                                    <span class="glyphicon glyphicon-trash"></span>
                                                                    <span class="hidden-xs hidden-sm hidden-md TableButtonNames">DELETE</span>
                                                                </a>
                                                            </td>*@


                                }
                                @if (transponder.TransponderStatusCode == "D")
                                {
                                    <td data-sort-value="@transponder.TransponderStatusCode" data-filter-value="@transponder.TransponderStatusCode" class="red">@transponder.TransponderStatus</td>
                                    <td>
                                        <a class="btn btn-link footableButton replaceTransRow" data-replace-tag="@transponder.TransponderNumber" data-replace-type="@transponder.TransponderType" data-activity-type="@((int) TRAILSWEB.Models.CartActivityType.Replace)" data-toggle="modal" data-target='#ReplaceTransponders_Modal' data-id="@transponder.TransponderNumber" href="#deleteconfirmationmodal">
                                            <i class="material-icons">loop</i>
                                            <span class="hidden-xs hidden-sm hidden-md TableButtonNames">&nbsp;Replace</span>
                                        </a>
                                    </td>
                                    <td>
                                        <button class="btn btn-link footableButton replaceTagButton" data-replace-tag="@transponder.TransponderNumber" data-replace-type="@transponder.TransponderType" data-activity-type="@((int) TRAILSWEB.Models.CartActivityType.Replace)" data-toggle="modal" data-target='#EditTransponders_Modal'>
                                            <i class="material-icons">create</i>
                                            <span class="hidden-xs hidden-sm hidden-md TableButtonNames">&nbsp;Edit</span>
                                        </button>
                                    </td>
                                                        @*<td>
                                                                <a class="btn btn-danger deleteTransRow" data-toggle="modal" data-target='#deleteConfirmationModal' data-id="@transponder.TransponderNumber" href="#deleteconfirmationmodal">
                                                                    <span class="glyphicon glyphicon-trash"></span>
                                                                    <span class="hidden-xs hidden-sm hidden-md TableButtonNames">DELETE</span>
                                                                </a>
                                                            </td>*@
                                }
                                                    @*else if (transponder.TransponderStatusCode == "R")
                                                        {
                                                            <td data-sort-value="@transponder.TransponderStatusCode" data-filter-value="@transponder.TransponderStatusCode">@transponder.TransponderStatus</td>
                                                            <td><button class="btn btn-link replaceTagButton" data-replace-tag="@transponder.TransponderNumber" data-replace-type="@transponder.TransponderType" data-activity-type="@((int)TRAILSWEB.Models.CartActivityType.Replace)" data-toggle="modal" data-target='#EditTransponders_Modal'><span class="fa fa-pencil fa-lg" aria-hidden="true"></span>&nbsp;Edit</button></td>
                                                            <td>
                                                                <a class="btn btn-danger deleteTransRow" data-toggle="modal" data-target='#deleteConfirmationModal' data-id="@transponder.TransponderNumber" href="#deleteconfirmationmodal">
                                                                    <span class="glyphicon glyphicon-trash"></span>
                                                                    <span class="hidden-xs hidden-sm hidden-md TableButtonNames">DELETE</span>
                                                                </a>
                                                            </td>
                                                        }*@
                                else if (transponder.TransponderStatusCode == "P")
                                {
                                    <td data-sort-value="@transponder.TransponderStatusCode" data-filter-value="@transponder.TransponderStatusCode">@transponder.TransponderStatus</td>
                                    <td><button class="btn-xs btn-block replaceTagButton" data-replace-tag="@transponder.TransponderNumber" data-replace-type="@transponder.TransponderType" data-activity-type="@*((int) transponder.Activity)*@" data-target='#EditTransponders_Modal'><span class="fa fa-undo" aria-hidden="true"></span>&nbsp;Undo/Remove</button></td>
                                    <td>&nbsp;</td>
                                }
                                else
                                {
                                    <td data-sort-value="@transponder.TransponderStatusCode" data-filter-value="@transponder.TransponderStatusCode">@transponder.TransponderStatus</td>
                                    <td>&nbsp;</td>
                                    <td>&nbsp;</td>
                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                    @*<div class="text-center"><a class="btn btn-primary center-block" style="width: 37%;" href="Activate/AccountDetails?isGetEpass=true">Add / Replace<span class="hidden-xs hidden-sm hidden-md"></span></a></div>*@
                    <div class="text-center"><button type="button" class="btn btn-primary btn-add-something" data-toggle="modal" data-target="#AddTransponder_Modal">Add Transponder<span class="hidden-xs hidden-sm hidden-md"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row nomargin">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title"><i class="material-icons">receipt</i> Reports and Activity
                </h3>
            </div>
            <div class="panel-body">
                <button type="button" class="btn btn-info btn-reports" data-toggle="modal" data-target="#TollTransactions_Modal">Toll Transactions</button>
                <button type="button" class="btn btn-info btn-reports" data-toggle="modal" data-target="#MonthlyStatements_Modal">Monthly Statements</button>
                <button type="button" class="btn btn-info btn-reports" data-toggle="modal" data-target="#FinancialTransactions_Modal">Financial Transactions</button>
                <button type="button" class="btn btn-info btn-reports" data-toggle="modal" data-target="#ActivitySummary_Modal">Annual <span class="hidden-xs hidden-sm hidden-md">Account</span> Activity Summary</button>
                <button type="button" class="btn btn-info btn-reports" data-toggle="modal" data-target="#ParkingTransactions_Modal">Parking Transactions</button>
                <button type="button" class="btn btn-info btn-reports" id="pendingTransactionReports">Backlogged Transactions</button>
            </div>
        </div>
    </div>
</div>

<!-- BEGIN: Mobile Account Settings-->
<div class="row nomargin">
    <div class="col-xs-12 col-sm-12  mobile-sidebar">
        <div class="panel panel-info">
            <div class="panel-heading">
                <a href="#" data-toggle="modal" data-target="#AccountSettings_Modal"><span class="EditTextDark">&nbsp;Edit</span><span class="fa fa-pencil edit_graphic" aria-hidden="true"></span></a>
                <h3 class="panel-title"><i class="material-icons">settings</i> Account Settings
                </h3>
            </div>
            <div id="accountSettingsMobileBody" class="panel-body">
                <ul>
                    <li class="SideBarLI"><span class="@MonthlyStatementsInd"></span>&nbsp; Email Monthly Statement</li>
                    <li class="SideBarLI"><span class="@BalanceNotification"></span>&nbsp; Email Balance Notification</li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- END: Mobile Account Settings-->
<!-- BEGIN: Mobile Account Security -->
<div class="row nomargin">
    <div class="col-xs-12 col-sm-12 mobile-sidebar">
        <div class="panel panel-info">
            <div class="panel-heading">
                <a href="#" data-toggle="modal" data-target="#AccountSecurity_Modal"><span class="EditTextDark">&nbsp;Edit</span><span class="fa fa-pencil edit_graphic" aria-hidden="true"></span></a>
                <h3 class="panel-title"><i class="material-icons" style="width: 16px">assignment_account</i> Account Security
                </h3>
            </div>
            <div id="accountSecurityMobileBody" class="panel-body">
                <ul>
                    <li class="SideBarLI">
                        <strong>Username:</strong> <br>
                        @Html.Raw(@securityUsername)
                    </li>
                    <li class="SideBarLI">
                        <strong>Email Address:</strong> <br>
                        @Html.Raw(@securityEmail)
                    </li>
                    <li class="SideBarLI">
                        <strong>Phone Access PIN:</strong> <br>
                        @Html.Raw(@securityPin)
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- END: Mobile Account Security -->
</div>
</div>
</div>

<!-- MODAL SECTION -->
<!-- ACCOUNT SETTINGS MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="AccountSettings_Modal" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close closeAccountSettings" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="AcountSettingsTitle">Account Settings</h4>
            </div>
            <div class="modal-body">
                <h4>Monthly Statement Email Options:</h4>
                @Html.DropDownListFor(m => m.AccountPreferences.EmailStatementIndicatorListSelected, Model.EmailStatementIndicatorList, new {@class = "form-control"})
                @*@Html.DropDownList("LicensePlateType", Model.VehiclePlateTypes.Select(i => new SelectListItem() { Text = i.Value, Value = i.ID }), new { @class = "form-control" })
                        @Html.DropDownList("EmailStatementInd", Model.EmailStatementIndicatorList.Select(i => new SelectListItem() { Text = i.Value, Value = i.ID }), new { @class = "form-control" })

                        @Html.DropDownListFor(m => m.AccountPreferences.MonthlyEmailStatementType, Model.EmailStatementIndicatorList, new { @class = "form-control", @data_selected = "MonthlyEmailStatementType" })*@

                @*<select name="MonthlyEmailStatementType" id="MonthlyEmailStatementType" class="form-control selectpicker">

                        @foreach (var emailstatInd in Model.EmailStatementIndicatorList)
                        {.
                            <option value="@emailstatInd.ID">@emailstatInd.Value</option>
                        }
                        @*<option value="1">Get my statement attached</option>
                        <option value="2">Get a link to my statement</option>
                        <option value="0">No Email</option>*@
                @*</select>*@

                @*<h5>Email Notifications:</h5>*@

                <div class="checkbox checkBoxStyle purpleCheckbox">
                    <label id="OptedForLowBalanceLabel" for="OptedForLowBalanceField">
                        @Html.CheckBox("OptedForLowBalanceField", Model.AccountPreferences.OptedForLowBalanceField, new {@style = "display: none"})
                        <div class="customCheckbox"></div>
                        <!--<i class="fa fa-square fa-2x"></i><i class="fa fa-check-square fa-2x"></i>-->
                        <span>Send me an email when my balance is below the low balance amount.</span>
                    </label>
                </div>

                <div class="checkbox checkBoxStyle purpleCheckbox">
                    <label id="OptedForOutOfFundLabel" for="OptedForOutOfFundField">
                        @Html.CheckBox("OptedForOutOfFundField", Model.AccountPreferences.OptedForOutOfFundField, new {@style = "display: none"})
                        <div class="customCheckbox"></div>
                        <!--<i class="fa fa-square fa-2x"></i><i class="fa fa-check-square fa-2x"></i>-->
                        <span>Send me an email when my account is out of funds.</span>
                    </label>
                </div>

                @*<h5>Other Options:</h5>*@

                <div class="checkbox checkBoxStyle purpleCheckbox">
                    <label id="OptedForMonthlyStatementLabel" for="OptedForMonthlyStatementField">
                        @Html.CheckBox("OptedForMonthlyStatementField", Model.AccountPreferences.OptedForMonthlyStatementField, new {@style = "display: none"})
                        <div class="customCheckbox"></div>
                        <!--<i class="fa fa-square fa-2x"></i><i class="fa fa-check-square fa-2x"></i>-->
                        <span>Send monthly statement via USPS ($0.50 monthly)</span>
                    </label>
                </div>
                <div class="checkbox checkBoxStyle purpleCheckbox">
                    <label id="OptedForEmailParkingReceiptLabel" for="OptedForEmailParkingReceiptField">
                        @Html.CheckBox("OptedForEmailParkingReceiptField", Model.AccountPreferences.OptedForEmailParkingReceiptField, new {@style = "display: none"})
                        <div class="customCheckbox"></div>
                        <!--<i class="fa fa-square fa-2x"></i><i class="fa fa-check-square fa-2x"></i>-->
                        <span>Send parking receipts via email.</span>
                    </label>
                </div>
            </div>
            <div class="modal-footer">
                <button id="savePreferences" type="button" class="btn btn-primary bootStrapButton">Save changes</button>
                <button id="AccountSettings_Modal_CloseButton" type="button" class="btn btn-info closeAccountSettings bootStrapButton2">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF ACCOUNT SETTINGS MODAL SECTION -->
<!-- ACCOUNT SECURITY MODAL SECTION -->
<div class="modal fade bs-example-modal-lg " id="AccountSecurity_Modal" tabindex="-1" data-backdrop="static" data-keyboard="false" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @if (!ViewBag.ShowSecurity)
                {
                    <button type="button" class="close closeAccountSecurity" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                }
                <h4 class="modal-title" id="AccountSecurityTitle">Account Security</h4>
            </div>
            <div class="modal-body">
                <form id="updateSecurityForm" class="form-horizontal" action="/" method="post">
                    <h5 class="sectionHeading">Change Username</h5>

                    <div class="form-group">
                        <label class="control-label col-sm-3 col-xs-4">Username:</label>
                        <div class="col-sm-8 col-xs-8">
                            @Html.Raw(@securityUsername)
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3" for="newUsername1">New Username:</label>
                        @*<a id="usernameHelp" class="info help helpPopOnTop" data-toggle="popover" data-content="Username must be at least 8 characters in length and a combination of letters, numbers with NO spaces." style="border:none;background:none;color:#337ab7;" data-original-title="" title="Username Requirements"><i class="material-icons">help</i></a>*@
                        <div class="col-sm-8">
                            <input type="text" autocorrect="off" class="form-control" id="newUsername1" name="newUsername1" maxlength="32" size="32" placeholder="Please provide Username" onkeyup="manageController.confirmUsername()"/>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3" for="newUsername2">Confirm Username:</label>
                        @*<a id="confirmUsernameHelp" class="info help helpPopOnTop" data-toggle="popover" data-content="Username must be at least 8 characters in length and a combination of letters, numbers with NO spaces." style="border:none;background:none;color:#337ab7;" data-original-title="" title="Username Requirements"><i class="material-icons">help</i></a>*@
                        <div class="col-sm-8">
                            <input type="text" autocorrect="off" class="form-control" id="newUsername2" name="newUsername2" placeholder="Please confirm Username" maxlength="32" size="32" onkeyup="manageController.confirmUsername()">&nbsp;<span id="confirmUserMatchMessage"></span>
                        </div>
                    </div>

                    <h5 class="sectionHeading">Change Email</h5>

                    <div class="form-group">
                        <label class="control-label col-sm-3">Email:</label>
                        <div class="col-sm-9">
                            @{
                                var MissingEmailStyle = "";
                                var MissingEmailText = "";
                                if (string.IsNullOrEmpty(@securityEmail))
                                {
                                    MissingEmailStyle = "red";
                                    MissingEmailText = "A valid email is required.";
                                }
                                else
                                {
                                    MissingEmailText = securityEmail;
                                }

                            }
                            <span class="@MissingEmailStyle">@Html.Raw(@MissingEmailText)</span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3" for="securityEmail1">New Email:</label>
                        <div class="col-sm-8">
                            <input type="email" autocapitalize="off" autocorrect="off" autocomplete="email" class="form-control" id="securityEmail1" name="securityEmail1" placeholder="Please enter a New Email Address" maxlength="32" size="32" onkeyup="manageController.confirmEmail()">
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3" for="securityEmail2">Confirm Email:</label>
                        <div class="col-sm-8">
                            <input type="email" autocapitalize="off" autocorrect="off" autocomplete="email" class="form-control" id="securityEmail2" name="securityEmail2" placeholder="Please confirm New Email Address" maxlength="32" size="32" onkeyup="manageController.confirmEmail()">&nbsp;<span id="confirmEmailMatchMessage"></span>
                        </div>
                    </div>

                    <h5 class="sectionHeading">Change Password</h5>
                    <div class="form-group">
                        <label class="control-label col-sm-3" for="newPass1">New Password:</label>
                        @*<a id="passwordHelp" class="info help helpPopOnTop" data-toggle="popover" data-content="Password must be at least 8 characters in length and a combination of letters, numbers and special characters with NO spaces." style="border:none;background:none;color:#337ab7;" data-original-title="" title="Password Requirements"><i class="material-icons">help</i></a>*@
                        <div class="col-sm-8">
                            <input type="password" class="form-control cfxPasswordPreference cfxCapslockCheck parent1" id="newPass1" name="newPass1" placeholder="Please enter a New Password" maxlength="25" size="25" autocomplete="off" onkeyup="manageController.confirmPassword()">
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3" for="newPass2">Confirm Password:</label>
                        @*<a id="confirmPasswordHelp" class="info help helpPopOnTop" data-toggle="popover" data-content="Password must be at least 8 characters in length and a combination of letters, numbers and special characters with NO spaces." style="border:none;background:none;color:#337ab7;" data-original-title="" title="Password Requirements"><i class="material-icons">help</i></a>*@
                        <div class="col-sm-8">
                            <input type="password" class="form-control" id="newPass2" name="newPass2" placeholder="Please confirm New Password" maxlength="25" size="25" autocomplete="off" onkeyup="manageController.confirmPassword()">&nbsp;<span id="confirmPassMatchMessage"></span>
                        </div>
                    </div>

                    <h5 class="sectionHeading">Change Phone Access PIN</h5>
                    <div class="form-group">
                        <label class="control-label col-sm-3 col-xs-5">Phone Access Pin:</label>
                        <div class="col-sm-7 col-xs-7">
                            @Html.Raw(@securityPin)
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3" for="newPin">New Phone Access PIN:</label>
                        <div class="col-sm-9">
                            <input type="number" pattern="[1-9][0-9]*" inputmode="numeric" class="form-control" id="newPin" name="newPin" maxlength="4" size="4" placeholder="Enter a 4 digit pin for accessing your account over the phone" title="Please choose a 4 digit number which you will use when accessing your account over the phone." autocomplete="off">
                        </div>
                    </div>
                    <br/>
                    <h5 class="sectionHeading">Current Password is required to save any changes</h5><br/>

                    <div class="form-group">
                        <label class="control-label col-sm-3" for="oldPass1">Current Password:</label>
                        <div class="col-sm-9">
                            <input type="password" class="form-control" id="oldPass1" name="oldPass1" placeholder="Please re-enter your current Password" maxlength="25" size="25" autocomplete="off">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <!--data-dismiss="modal" -->
                @*<button type="button" class="btn btn-default confirm-exit @if (!ViewBag.ShowSecurity) { <text>disabled</text> }" id="AccountSecurity_Modal_Logout">Logout</button>*@
                <button id="saveSecurity" type="button" class="btn btn-primary bootStrapButton">Save changes</button>

                @if (ViewBag.ShowSecurity)
                {
                    <a href="#" type="button" class="btn btn-info confirm-exit bootStrapButton2" data-toggle="modal" , data-target="#logOffConfirmationModal"> Logout</a>
                }
                else
                {
                    <button type="button" class="btn btn-info closeAccountSecurity bootStrapButton2" id="AccountSecurity_Modal_CloseButton">Close</button>
                }
            </div>
        </div>
    </div>
</div>
<!-- END OF ACCOUNT SECURITY MODAL SECTION -->
<!-- ALERT MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="Alert_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="AlertTitle">Alert</h4>
            </div>

            @{
                var alerts = Model.AccountAlerts;
            }
            @foreach (var alert in alerts)
            {

                var alertClass = "";

                if (alert.SeverityField == "Critical")
                {
                    alertClass = "alert alert-danger col-xs-12 col-sm-12 col-md-12 col-lg-12";
                }
                else if (alert.SeverityField == "Warning")
                {
                    alertClass = "alert alert-info col-xs-12 col-sm-12 col-md-12 col-lg-12";
                }
                else
                {
                    alertClass = "alert alert-success col-xs-12 col-sm-12 col-md-12 col-lg-12";
                }
                <div class="@alertClass" style="width: 98%" role="alert">
                    <div>
                        <span class="fa fa-exclamation-triangle fa-lg" aria-hidden="true"/>
                        <strong class="alert-header">@alert.AlertTitleField</strong>
                    </div>
                    <div style="display: block; padding-top: 6px; font-family: OpenSans; color: #000; font-weight: normal; font-size: .9em">
                        @Html.Raw(alert.AlertDetailField)
                    </div>
                    <div>
                        @if (alert.LinkAddressField.StartsWith("#"))
                        {
                            <button type="button" class="col-xs-5 col-md-3 col-lg-2 btn btn-sm btn-danger newPopupFromPopup" style="margin-top: 5px; margin-bottom: 5px" data-toggle="modal" data-target="@alert.LinkAddressField">@alert.LinkTextField</button>
                        }
                        else
                        {
                            <a href="@alert.LinkAddressField">@alert.LinkTextField</a>
                        }
                    </div>
                </div>
            }

            <div class="modal-footer">
                <button type="button" class="btn btn-info bootStrapButton" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF ALERT MODAL SECTION -->
<!-- CONTACT MODAL SECTION -->
<div class="modal fade bs-example-modal-md" id="Contact_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close closeContact" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="ContactTitle">Contact Info</h4>
            </div>
            <div class="modal-body">
                <form id="updateContactForm" class="form-horizontal" action="/" method="post">

                    <div class="form-group row" style="margin-top: 1px;">
                        <label class="col-sm-12 col-xs-12">Address Line 1:</label>
                        <div class="col-sm-12 col-xs-12">
                            <input class="col-sm-12 col-xs-12 form-control" name="contactAddressLine1" id="contactAddressLine1" type="text" value="@Html.Raw(@contactAddressLine1)" size="25" autocorrect="off" autocomplete="address-line1" placeholder="Enter Line 1 of your Street Address"/>
                        </div>
                    </div>

                    <div class="form-group row" style="margin-top: 1px;">
                        <label class="col-sm-12 col-xs-12">Address Line 2:</label>
                        <div class="col-sm-12 col-xs-12">
                            <input class="form-control" name="contactAddressLine2" id="contactAddressLine2" type="text" value="@Html.Raw(@contactAddressLine2)" size="25" autocorrect="off" autocomplete="address-line2" placeholder="Enter Line 2 of your Address (Floor, Suite, etc.)"/>
                        </div>
                    </div>

                    <div class="form-group row" style="margin-top: 1px;">
                        <label class="col-sm-12 col-xs-12">City:</label>
                        <div class="col-sm-12 col-xs-12">
                            <input class="form-control" name="contactCity" id="contactCity" type="text" value="@Html.Raw(@contactCity)" size="25" autocorrect="off" autocomplete="address-level2" placeholder="Enter your City"/>
                        </div>
                    </div>

                    <div class="form-group row" style="margin-top: 1px;">
                        <label class="col-sm-12 col-xs-12">State:</label>
                        <div class="col-sm-12 col-xs-12">
                            @Html.DropDownList("contactState", Model.StateCodes.Select(i => new SelectListItem() {Text = i.Value, Value = i.ID}), new {@class = "form-control"})
                        </div>
                    </div>

                    <div class="form-group row" style="margin-top: 1px;">
                        <label class="col-sm-12 col-xs-12">Zip:</label>
                        <div class="col-sm-12 col-xs-12">
                            <input class="col-sm-12 col-xs-12 form-control input-medium" name="contactZip" type="number" value="@Html.Raw(@contactZip)" size="10" id="contactZip" autocorrect="off" autocomplete="postal-code" maxlength="5" pattern="[0-9]{5}" placeholder="Enter your 5 Digit Zip Code">
                        </div>
                    </div>

                    <div class="form-group row" style="margin-top: 1px;">
                        <label class="col-sm-12 col-xs-12">Primary Phone:</label>
                        <div class="col-sm-12 col-xs-12">
                            <input class="col-sm-12 col-xs-12 form-control input-medium bfh-phone" name="contactDayPhone" type="tel" data-format="ddd-ddd-dddd" value="@Html.Raw(@contactDayPhone)" size="25" id="contactDayPhone" autocorrect="off" autocomplete="tel-national" placeholder="Enter your Phone Number"/>
                        </div>
                    </div>



                    <div class="form-group row" style="margin-top: 8px;">
                        <label class="col-sm-12 col-xs-12">Secondary Phone:</label>
                        <div class="col-sm-12 col-xs-12">
                            <input class="form-control input-medium bfh-phone" name="contactEveningPhone" type="tel" data-format="ddd-ddd-dddd" value="@Html.Raw(@contactEveningPhone)" size="25" id="contactEveningPhone" autocorrect="off" autocomplete="tel-national" placeholder="Enter your Phone Number"/>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="saveContact" type="button" class="btn btn-primary bootStrapButton" disabled>Save changes</button>
                <button id="closeContactButton" type="button" class="btn btn-info closeContact bootStrapButton2">Close</button>

            </div>
        </div>
    </div>
</div>
<!-- END OF CONTACT MODAL SECTION -->
<!-- Customer Name MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="Customer_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close closeContact" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="ContactTitle">Customer Information</h4>
            </div>
            <div class="modal-body">
                <form id="updateContactForm" class="form-horizontal" action="/" method="post">
                    <div class="form-group">
                        <label class="control-label col-sm-3">Primary Name:</label>
                        <div class="col-sm-9" style="margin-top: 8px;">
                            <input class="form-control" name="contactAddressLine1" id="primaryCustomerName" type="text" value="@Html.Raw(@primaryName)" size="25" autocorrect="off" autocomplete="address-line1" placeholder="Enter Primary User Name"/>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3">Primary Drivers License:</label>
                        <div class="col-sm-9" style="margin-top: 8px;">
                            <input class="form-control" name="contactAddressLine2" id="primaryLicenseNumber" type="text" value="@Html.Raw(@primaryLicense)" size="25" autocorrect="off" autocomplete="address-line2" placeholder="Enter Primary User Driver License"/>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3">Primary License State:</label>
                        <div class="col-sm-9" style="margin-top: 8px;">
                            @Html.DropDownList("customerPrimaryState", Model.StateCodes.Select(i => new SelectListItem() {Text = i.Value, Value = i.ID}), new {@class = "form-control"})

                        </div>
                    </div>


                    <div class="form-group">
                        <label class="control-label col-sm-3">Secondary Name:</label>
                        <div class="col-sm-9" style="margin-top: 8px;">
                            <input class="form-control" name="contactCity" id="secondaryCustomerName" type="text" value="@Html.Raw(@secondaryName)" size="25" autocorrect="off" autocomplete="address-level2" placeholder="Enter your City"/>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3">Secondary Drivers License:</label>
                        <div class="col-sm-9" style="margin-top: 8px;">
                            <input class="form-control" name="contactCity" id="secondaryLicenseNumber" type="text" value="@Html.Raw(@secondaryLicense)" size="25" autocorrect="off" autocomplete="address-level2" placeholder="Enter your City"/>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-sm-3">Secondary License State:</label>
                        <div class="col-sm-9" style="margin-top: 8px;">
                            @Html.DropDownList("customerSecondaryState", Model.StateCodes.Select(i => new SelectListItem() {Text = i.Value, Value = i.ID}), new {@class = "form-control"})

                        </div>
                    </div>

                </form>

                <div style="text-align: right; font-size: 9px">Indicates Required Text</div>
            </div>
            <div class="modal-footer">
                <button id="saveCustomer" type="button" class="btn btn-primary bootStrapButton" disabled>Save changes</button>
                <button id="closeCustomerButton" type="button" class="btn btn-info closeContact bootStrapButton2">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF CONTACT MODAL SECTION -->
<!-- PAYMENT MODAL SECTION -->
<div class="modal fade bs-example-modal-md" id="Payment_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close closePayment" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="PaymentTitle">Payment Info</h4>
            </div>
            <div class="modal-body">

                <form id="updatePaymentForm" class="form-horizontal" action="/" method="post">

                    <input type="hidden" id="AccountOpenedYear" value="@Model.AccountInfo.OpenedDate.Year"/>
                    <input type="hidden" id="AccountOpenedMonth" value="@Model.AccountInfo.OpenedDate.Month"/>
                    <input type="hidden" id="RecentStatementMonth" value="@Model.AccountInfo.RecentStatementDate.Month"/>

                    <div class="form-group" hidden>
                        <label class="control-label col-sm-4">Credit Card Type:</label>
                        @Html.Hidden("CreditCardType", @paymentCardType, new {@class = "CreditCardType static"})
                    </div>
                    @{
                        var creditMonth = Model.PaymentInfo.ExpirationMonth;
                        var creditYear = Model.PaymentInfo.ExpirationYear;
                    }
                    <div class="form-group row">
                        @if (string.IsNullOrEmpty(paymentCardNumber))
                        {
                            <label class="col-sm-12 col-xs-12">Card Number:</label>
                        }
                        else
                        {
                            <label class="col-sm-12 col-xs-12">Card ending in @paymentCardNumber</label>
                        }
                        <div class="col-sm-10 col-xs-12 creditCard">

                            <div class="creditCardDiv">
                                @if (string.IsNullOrEmpty(paymentCardNumber))
                                {
                                    <input class="form-control no-spin CreditCardNumber" name="changeCardNumber" type="number" id="changeCardNumber" autocomplete="off" placeholder="Please enter Credit Card Number" size="25" maxlength="25"/>
                                }
                                else
                                {
                                    <input class="form-control no-spin CreditCardNumber" name="changeCardNumber" type="number" id="changeCardNumber" autocomplete="off" value=@Model.PaymentInfo.CreditCardNumber size="25" maxlength="25" style="display: none !important"/>
                                }
                                <span class="card_icon"></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-sm-5 nopadding">
                            <label class="col-xs-12 col-md-12">Expiration Month:</label>
                            <div class="col-xs-12 col-md-7"><input id="ccMonth" name="ccMonth" type="number" class="form-control" value="@creditMonth" placeholder="MM"/>
                            </div>
                        </div>
                        <div class="col-sm-5 nopadding">
                            <label class="col-xs-12 col-md-12">Expiration Year:</label>
                            <div class="col-xs-12 col-md-7"><input id="ccYear" name="ccYear" type="number" min="@DateTime.Now.Year" max="@(DateTime.Now.Year + 20)" class="form-control" value="@creditYear" placeholder="YYYY"/>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-12" style="margin-top: 8px;">
                            <div class="checkbox checkBoxStyle purpleCheckbox">
                                <label id="paymentAutoBillHidde" for="paymentAutoBill">
                                    @Html.CheckBox("paymentAutoBill", @paymentAutoBill)
                                    <!-- <i class="fa fa-square"></i><i class="fa fa-check-square"></i>-->
                                    <div class="customCheckbox"></div>
                                    <span> Automatically Bill My Card</span>
                                </label>
                                <a id="automaticBillingHelp" class="info help" rel="popover" data-toggle="popover" title="" data-content="" style="padding-top: 5px; color: #337ab7">
                                    <i class="material-icons">help</i>
                                </a>
                            </div>
                        </div>
                    </div>

                    <div class="form-group row" id="repAmountRow">
                        <label class="col-sm-12 col-xs-12">Replenish Amount:</label>
                        <div class="col-sm-12 nomargin" style="margin-top: 8px;">
                            <div class="col-sm-4 col-xs-12 nomargin">
                                <div class="input-group">
                                    <input name="paymentRepAmount" type="number" max="9999" class="form-control" value='@Html.Raw(@paymentCardReplenishAmount == "0" || @paymentCardReplenishAmount == "" ? @displayCardMinPaymentCardReplenishAmount.ToString() : @paymentCardReplenishAmount)' id="paymentRepAmount">
                                    <input type="hidden" value='@paymentCardReplenishAmount == "0" || @paymentCardReplenishAmount == "" ? @minPaymentCardReplenishAmount.ToString() : @paymentCardReplenishAmount' id="paymentRepAmountOrig">
                                </div>
                            </div>
                            <label class="col-sm-8 col-xs-12">
                                Minimum Amount: $@minPaymentCardReplenishAmount
                            </label>
                        </div>
                    </div>

                    <div class="form-group row" id="lowAmountRow">
                        <label class="col-sm-12 col-xs-12">Low Balance Amount:</label>
                        <div class="col-sm-12 nomargin" style="margin-top: 8px;">
                            <div class="col-sm-4 col-xs-12 nomargin">
                                <div class="input-group">
                                    <input name="paymentLowAmount" type="number" max="9999" class="form-control" value='@Html.Raw(@paymentCardLowBalance == "0" || @paymentCardLowBalance == "" ? @minPaymentCardLowBalance.ToString() : @paymentCardLowBalance)' id="paymentLowAmount"/>
                                    <input type="hidden" value='@paymentCardLowBalance == "0" || @paymentCardLowBalance == ""? @minPaymentCardLowBalance : @paymentCardLowBalance' id="paymentLowAmountOrig"/>
                                </div>
                            </div>
                            <label class="col-sm-8 col-xs-12">
                                Minimum Amount: $@minPaymentCardLowBalance
                            </label>
                        </div>
                    </div>

                    <div class="form-group" id="lowAmountRowNo">
                        <label class="col-sm-4" style="width: auto;">Low Balance Amount: $@paymentCardLowBalance</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="savePaymentDetails" class="btn btn-primary bootStrapButton">Save changes</button>
                <button type="button" id="deletePaymentButton" class="btn btn-danger bootStrapButton2" data-dismiss="modal">Delete Credit Card</button>
                <button id="closePaymentButton" type="button" class="btn btn-info closePayment bootStrapButton2">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF PAYMENT MODAL SECTION -->
<!-- VIEW PAYMENT HISTORY MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="PaymentHistory_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="PaymentHistoryTitle">Payment History</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label col-md-2 col-sm-2 reportLabel">Start Date</label>
                    <div id="paymentHistoryStartDate" class="col-md-3 col-sm-4 bfh-datepicker" data-min="@(DateTime.Now - TimeSpan.FromDays(365)).ToShortDateString()" data-max="today">
                        <input type="text" class="form-control"/>
                    </div>
                    <label class="control-label col-md-2 col-sm-1 reportLabel">End Date</label>
                    <div id="paymentHistoryEndDate" class="col-md-3 col-sm-4 bfh-datepicker" data-max="today" data-min="@(DateTime.Now - TimeSpan.FromDays(365)).ToShortDateString()">
                        <input type="text" class="form-control"/>
                    </div>
                    <div class="col-sm-offset-2">&nbsp;</div>
                </div>

                <div id="paymentsTable">
                    <table id="paymentsReportTable" class="table2 table table-striped reportsTable" data-sorting="true" data-filtering="true" data-paging="true" data-paging-size="5" data-empty="No Payments Found">
                        <tbody></tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="submitPaymentHistory" class="btn btn-primary bootStrapButton">Apply</button>
                <button type="button" class="btn btn-info bootStrapButton2" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF VIEW PAYMENT HISTORY MODAL SECTION -->
<!-- VIEW Toll Transactions MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="TollTransactions_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="TollTransactionsTitle">Toll Transactions</h4>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <p style="display: inline-block;"><i class="fa fa-info-circle" style="display: inline"></i>&nbsp;The start and end dates are based on the date the transaction was posted to your account.
                        <br/>NOTE: Limit of 3 vehicles per request.
                    </p>


                </div>
                <div class="container AutoWidth">
                    <h5>Vehicle Transponders</h5>
                </div>

                <div class="table-responsive">
                    <table id="vehicleTransponderGrid" class="table table-striped" data-sorting="true" data-filtering="true" data-paging="true" data-paging-size="5" data-empty="No Transponders found">
                        <thead>
                        <tr>
                            <th data-type="html" data-sortable="false" data-filterable="false">&nbsp;</th>
                            <th>
                                Vehicle
                            </th>
                            <th data-breakpoints="all">
                                Year
                            </th>
                            <th data-breakpoints="all">
                                Color
                            </th>
                            <th>
                                License Plate
                            </th>
                            <th data-breakpoints="all">
                                State
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (TRAILSWEB.Models.TransponderModel transponder in Model.TransponderList.Where(t => t.TransponderNumber != 0))
                        {
                            <tr>
                                <td><input class="transponderTollTransactions" type="checkbox" value="@transponder.TransponderNumber"/>
                                </td>
                                <td>
                                    @transponder.Make @transponder.Model
                                </td>
                                <td>
                                    @transponder.Year
                                </td>
                                <td>
                                    @transponder.Color
                                </td>
                                <td>
                                    @transponder.LicensePlateNumber
                                </td>
                                <td>
                                    @transponder.LicenseStateSelected
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>


                <div class="table-responsive">
                    <table id="tollTransactionsTable" class="tollTransactionsTable table table-striped reportsTable" data-sorting="true" data-filtering="true" data-paging="true" data-paging-size="5" data-empty="">
                        @*<thead>
                        <tr>
                            <th>Vehicle</th>
                            <th data-breakpoints="all" data-type="number">Year</th>
                            <th data-breakpoints="all">Color</th>
                            <th>License Plate</th>
                            <th data-breakpoints="all">State Registered</th>
                            <th data-breakpoints="xs" data-type="html">Transponder</th>
                            <th data-breakpoints="xs">Status</th>
                            <th data-type="html" data-sortable="false" data-filterable="false">&nbsp;</th>
                </tr>
                    </thead>*@
                        <tbody></tbody>
                    </table>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2 col-sm-2 reportLabel">Start Date</label>
                    <div id="tollTransactionsStartDate1" class="col-md-3 col-sm-4 ui-icon-calendar">
                        <div><input type="text" class="form-control calendar-align" id="tollTransactionsStartDate"/>
                        </div>
                    </div>

                    <label class="control-label col-md-2 col-sm-1 reportLabel">End Date</label>
                    <div id="tollTransactionsEndDate1" class="col-md-3 col-sm-4 ui-icon-calendar">
                        <div><input type="text" class="form-control calendar-align" id="tollTransactionsEndDate"/>
                        </div>
                    </div>
                    <div class="col-sm-offset-2">&nbsp;</div>
                </div>

                <span class="hidden-xs"><br/></span>



                <!-- Validation messages -->
                <div class="form-group alert-danger" id="tollTransactionsAlert">
                    <div id="tollTransactionsErrors">
                    </div>
                </div>



                <div id="tollTransactionsExport" class="row form-group" style="display: none;">
                    <label class="control-label col-sm-2">Export to:</label>
                    <div class="col-sm-6">
                        <select class="form-control" id="tollTransactionsExportType">
                            <option value="PDF">PDF</option>
                            <option value="Excel">MS Excel</option>
                            <option value="Excel Data">MS Excel-Data</option>
                            <option value="DOC">Word</option>
                            @*<option value="CSV">CSV</option>*@
                            <option value="Text">Text</option>
                        </select>
                    </div>
                    <div class="col-sm-4">
                        <button class="btn btn-success" id="exportTollTransactionsButton">Export</button>
                    </div>
                </div>

                <!-- Validation message -->
                <div id="tollTransactionsErrorMessage" style="color: red; display: none; padding: 5px;"></div>
            </div>

            <div class="modal-footer">
                <button type="button" id="getTollTransactionsButton" class="btn btn-primary bootStrapButton" disabled>Apply</button>
                <button type="button" class="btn btn-info bootStrapButton2" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>
<!-- END OF VIEW Toll Transactions MODAL SECTION -->
<!-- VIEW Financial Transactions MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="FinancialTransactions_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="FinancialTransactionsTitle">Financial Transactions</h4>
            </div>
            <div class="modal-body">

                <div class="alert alert-info">
                    <p>
                        <span class="hidden-xs hidden-sm hidden-md alert-info-span"><i class="fa fa-info-circle"></i>&nbsp;The start and end dates are based on the date the transaction was posted to your account.</span>
                    </p>
                </div>

                <div class="form-group">
                    <label class="control-label col-sm-2 reportLabel">Start Date</label>
                    @*<div id="financialTransactionsStartDate" class="col-sm-3 bfh-datepicker" data-max="today" data-min="@(DateTime.Now - TimeSpan.FromDays(365)).ToShortDateString()" data-align="right">
                            <input type="text" class="form-control" />
                        </div>*@
                    <div id="financialTransactionsStartDate1" class="col-sm-3 ui-icon-calendar">
                        <div><input type="text" class="form-control calendar-align" id="financialTransactionsStartDate"/>
                        </div>
                    </div>
                    <label class="control-label col-sm-2 reportLabel">End Date</label>
                    @*<div id="financialTransactionsEndDate" class="col-sm-3 bfh-datepicker" data-max="today" data-min="@(DateTime.Now - TimeSpan.FromDays(365)).ToShortDateString()" data-align="right">
                            <input type="text" class="form-control" />
                        </div>*@
                    <div id="financialTransactionsEndDate1" class="col-sm-3 ui-icon-calendar">
                        <div><input type="text" class="form-control calendar-align" id="financialTransactionsEndDate"/>
                        </div>
                    </div>
                    <div class="col-sm-offset-2">&nbsp;</div>
                </div>

                <!-- Validation messages -->
                <div class="form-group alert-danger" id="financialTransactionsAlert">
                    <div id="financialTransactionsErrors">
                    </div>
                </div>


                <div class="table-responsive">
                    <table id="financialTransactionsTable" class="tableFinancialTransactions table table-striped reportsTable" data-sorting="true" data-filtering="true" data-paging="true" data-paging-size="5" data-empty="">
                        <tbody></tbody>
                    </table>
                </div>

                <div id="financialTransactionsExport" style="display: none;">
                    Export to:
                    <select id="financialTransactionsExportType">
                        <option value="PDF">PDF</option>
                        <option value="Excel">MS Excel</option>
                        <option value="Excel Data">MS Excel-Data</option>
                        <option value="DOC">Word</option>
                        @*<option value="CSV">CSV</option>*@
                        <option value="Text">Text</option>
                    </select>
                    <button id="exportFinancialTransactionsButton" class="btn btn-success btn-xs"><i class="fa fa-share-square-o" aria-hidden="true"></i>&nbsp;Export</button>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" id="getFinancialApplyButton" class="btn btn-primary bootStrapButton">Apply</button>
                <button type="button" class="btn btn-info bootStrapButton2" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF VIEW Financial Transactions MODAL SECTION -->
<!-- VIEW Monthly Statements MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="MonthlyStatements_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="MonthlyStatementsTitle">Monthly Statements</h4>
            </div>
            <div class="modal-body">
                <div class="row form-group">
                    <label class="control-label col-xs-7 col-md-3">Show statements for </label>
                    <div class="col-xs-8 col-md-3" data-align="right">
                        <select class="form-control" name="StatementsYearDropdown" id="StatementsYearDropdown">

                            @foreach (var year in Model.StatementYears)
                            {
                                <option value=@year>@year</option>
                            }

                        </select>
                    </div>
                    <div class="col-xs-8 col-md-3" data-align="right">
                        <select class="form-control" name="StatementsMonthDropdown" id="StatementsMonthDropdown">

                            <option value="12">December</option>
                            <option value="11">November</option>
                            <option value="10">October</option>
                            <option value="9">September</option>
                            <option value="8">August</option>
                            <option value="7">July</option>
                            <option value="6">June</option>
                            <option value="5">May</option>
                            <option value="4">April</option>
                            <option value="3">March</option>
                            <option value="2">February</option>
                            <option selected="selected" value="1">January</option>
                        </select>
                    </div>
                    <div class="col-xs-8 col-md-3" data-align="right">
                        <select id="MonthlyStatementExportType" name="MonthlyStatementExportType" class="form-control">
                            <option value="PDF">PDF</option>
                            <option value="Excel">MS Excel</option>
                            <option value="Excel Data">MS Excel-Data</option>
                            <option value="CSV">CSV</option>
                            <option value="Text">Text</option>
                        </select>
                    </div>
                </div>

                <div id="monthlyStatementsModalMessage">

                </div>

            </div>
            <div class="modal-footer">
                <button type="button" id="getMonthlyStatementsButton" class="btn btn-primary bootStrapButton">View</button>
                <button type="button" id="emailMonthlyStatementsButton" class="btn btn-success bootStrapButton2">Email</button>
                <button type="button" class="btn btn-info bootStrapButton2" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF VIEW Monthly Statements MODAL SECTION -->
<!-- VIEW Account Activity Summary MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="ActivitySummary_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="ActtivitySummaryTitle">Activity Summary</h4>
            </div>
            <div class="modal-body">

                <div class="container-fluid">
                    <div class="form-group">

                        <label class="control-label col-sm-2">Year </label>
                        <div class="col-sm-3" data-align="right">
                            <select name="ActivityYearDropdown" class="form-control" id="ActivityYearDropdown">

                                @foreach (var year in Model.StatementYears)
                                {
                                    <option value=@year>@year</option>
                                }

                            </select>
                        </div>

                        <label class="control-label col-sm-2">
                            Format:
                        </label>
                        <div class="col-sm-3" data-align="right">
                            <select id="activitySummaryExportType" class="form-control">
                                <option value="PDF">PDF</option>
                                <option value="Excel">MS Excel</option>
                                <option value="Excel Data">MS Excel-Data</option>
                                <option value="DOC">Word</option>
                                @*<option value="CSV">CSV</option>*@
                                <option value="Text">Text</option>
                            </select>
                        </div>

                        <div class="col-md-offset-4 hidden-xs hidden-sm">&nbsp;</div>
                    </div>
                </div>

            </div>
            <div id="activitySummaryModalMessage"></div>
            <div class="modal-footer">
                <button type="button" id="activitySummaryDownloadButton" class="btn btn-primary bootStrapButton"><i class="fa fa-download" aria-hidden="true"></i>&nbsp;Download</button>
                <button type="button" id="activitySummaryEmailButton" class="btn btn-success bootStrapButton2"><i class="fa fa-envelope-o" aria-hidden="true"></i>&nbsp;Email</button>
                <button type="button" class="btn btn-info bootStrapButton2" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF VIEW Account Activity Summary MODAL SECTION -->
<!-- VIEW Parking Transactions MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="ParkingTransactions_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="ParkingTransactionsTitle">Parking Transactions</h4>
            </div>
            <div class="modal-body">

                <div class="alert alert-info">
                    <p>
                        <i class="fa fa-info-circle"></i>&nbsp;The Start and End Dates are based on the date the transaction was posted to your account.
                    </p>
                    NOTE: Limit of 3 vehicles per request.
                </div>

                <!-- Validation messages -->
                <div class="form-group alert-danger" id="parkingTransactionAlert">
                    <div id="parkingTransactionsErrors">
                    </div>
                </div>

                <div class="container-fluid">
                    <h5>Vehicle Transponders</h5>
                </div>

                <div class="table-responsive">
                    <table id="parkingTransactionsVehicleSelection" class="table table-striped" data-sorting="true" data-filtering="true" data-paging="true" data-paging-size="5" data-empty="No Transponders found">
                        <thead>
                        <tr>
                            <th data-type="html" data-sortable="false" data-filterable="false">&nbsp;</th>
                            <th>
                                Vehicle
                            </th>
                            <th data-breakpoints="all">
                                Year
                            </th>
                            <th data-breakpoints="all">
                                Color
                            </th>
                            <th>
                                License Plate
                            </th>
                            <th data-breakpoints="all">
                                State
                            </th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (TRAILSWEB.Models.TransponderModel transponder in Model.TransponderList.Where(t => t.TransponderNumber != 0))
                        {
                            <tr>
                                <td>
                                    <input class="transponderTollTransactions" type="checkbox" value="@transponder.TransponderNumber"/>
                                </td>
                                <td>
                                    @transponder.Make @transponder.Model
                                </td>
                                <td>
                                    @transponder.Year
                                </td>
                                <td>
                                    @transponder.Color
                                </td>
                                <td>
                                    @transponder.LicensePlateNumber
                                </td>
                                <td>
                                    @transponder.LicenseStateSelected
                                </td>
                            </tr>
                        }
                        </tbody>


                    </table>
                </div>

                <div class="form-group">
                    <label class="control-label col-sm-2 reportLabel">Start Date</label>
                    @*<div id="parkingTransactionsStartDate1" class="col-sm-3 bfh-datepicker" data-max="today" data-min="@(DateTime.Now - TimeSpan.FromDays(90)).ToShortDateString()" data-align="right">
                            <input type="text" class="form-control" />
                        </div>*@
                    <div id="parkingTransactionsStartDate1" class="col-md-3 col-sm-4 ui-icon-calendar">
                        <div><input type="text" class="form-control calendar-align" id="parkingTransactionsStartDate"/>
                        </div>
                    </div>
                    <label class="control-label col-sm-2 reportLabel">End Date</label>
                    @*<div id="parkingTransactionsEndDate1" class="col-sm-3 bfh-datepicker" data-max="today" data-min="@(DateTime.Now - TimeSpan.FromDays(90)).ToShortDateString()" data-align="right">
                            <input type="text" class="form-control" />
                        </div>*@
                    <div id="parkingTransactionsEndDate1" class="col-md-3 col-sm-4 ui-icon-calendar">
                        <div><input type="text" class="form-control calendar-align" id="parkingTransactionsEndDate"/>
                        </div>
                    </div>
                    <div class="col-sm-offset-2">&nbsp;</div>
                </div>

                <span class="hidden-xs hidden-sm hidden-md"><br/></span>



                <div class="table-responsive">
                    <table id="parkingTransactionsTable" class="tableParkingTransactions table table-striped reportsTable" data-sorting="true" data-filtering="true" data-paging="true" data-paging-size="5" data-empty="No Transactions found">
                        @*<thead>
                                    <tr>
                                        <th>Vehicle</th>
                                        <th data-breakpoints="all" data-type="number">Year</th>
                                        <th data-breakpoints="all">Color</th>
                                        <th>License Plate</th>
                                        <th data-breakpoints="all">State Registered</th>
                                        <th data-breakpoints="xs" data-type="html">Transponder</th>
                                        <th data-breakpoints="xs">Status</th>
                                        <th data-type="html" data-sortable="false" data-filterable="false">&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>*@
                    </table>
                </div>

                <div id="parkingTransactionsExport" style="display: none;">
                    Export to:
                    <select id="parkingTransactionsExportType">
                        <option value="PDF">PDF</option>
                        <option value="Excel">MS Excel</option>
                        <option value="Excel Data">MS Excel-Data</option>
                        <option value="DOC">Word</option>
                        @*<option value="CSV">CSV</option>*@
                        <option value="Text">Text</option>
                    </select>
                    <button id="exportParkingTransactionsButton" class="btn btn-success">Export</button>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" id="getParkingApplyButton" class="btn btn-primary bootStrapButton">Apply</button>
                <button type="button" class="btn btn-info bootStrapButton2" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF VIEW Parking Transactions MODAL SECTION -->
<!-- EDIT TRANSPONDERS MODAL SECTION -->
<div class="modal fade bs-example-modal-lg" id="EditTransponders_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" transData-licensePlateNumber="" transData-licensePlateState="">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="EditTranspondersTitle">Edit Transponder</h4>
            </div>
            <div class="modal-body form-horizontal">

                <div class="">
                    <div class="col-sm-6 col-xs-11 col1-control form-group">
                        <label class="col-sm-12" for="LicensePlateNumber">License Plate:</label>
                        <div class="col-sm-12">
                            <input class="form-control" name="LicensePlateNumber" type="text" value="" maxlength="10" size="23" id="LicensePlateNumber" autocomplete="off" placeholder="Enter License Plate Number"/>
                        </div>

                    </div>

                    <div class="col-sm-6 col-xs-11 col1-control form-group">
                        <label class="col-sm-12" for="LicenseStateSelected">Plate State:</label>
                        <div class="col-sm-12">
                            @Html.DropDownList("LicenseStateSelected", Model.StateCodes.Select(i => new SelectListItem() {Text = i.Value, Value = i.ID}), new {@class = "form-control"})
                        </div>

                    </div>
                </div>


                <div class="">
                    <div class="col-sm-6 col-xs-11 col1-control form-group">
                        <label class="col-sm-12" for="LicensePlateType">Plate Type:</label>
                        <div class="col-sm-12">
                            @Html.DropDownList("LicensePlateType", Model.VehiclePlateTypes.Select(i => new SelectListItem() {Text = i.Value, Value = i.ID}), new {@class = "form-control"})
                        </div>
                    </div>

                    <div class="col-sm-6 col-xs-11 col1-control form-group">
                        <label class="col-sm-12" for="LicensePlateType">&nbsp;</label>
                        <div class="col-sm-12">
                            &nbsp;
                        </div>
                    </div>
                </div>
                <div class="clearfix"></div>


                <div class="">
                    <div class="col-sm-6 col-xs-11 col1-control form-group">
                        <label class="col-sm-12" for="VehicleMake">Vehicle Make:</label>
                        <div class="col-sm-12">
                            @Html.DropDownList("VehicleMake", Model.VehicleMakes.Select(i => new SelectListItem() {Text = i.MakeName, Value = i.MakeName}), new {@class = "form-control", id = "VehicleMake"})
                        </div>
                    </div>

                    <div class="col-sm-6 col-xs-11 col1-control form-group">
                        <label class="col-sm-12" for="VehicleModel">Vehicle Model:</label>
                        <div class="col-sm-12">
                            <div class="input-group">
                                @Html.DropDownList("VehicleModel", Model.VehicleModels.Select(i => new SelectListItem() {Text = i.ModelName, Value = i.ModelName}), new {@class = "form-control", id = "VehicleModel"})
                                @*<div class="input-group-btn">
                <button type="button" class="btn btn-info help" aria-label="Help" data-toggle="modal" data-target="#VehicleModalQuestion" title="Show me where to find this."><span class="glyphicon glyphicon-question-sign"></span></button>
            </div>*@
                                <a id="makeModelHelp" class="input-group-addon info help makeModelHelp" rel="popover" data-toggle="popover" data-content="" style="border-right: none; border-top: none; border-bottom: none">
                                    <span class="glyphicon glyphicon-question-sign" aria-hidden="true"></span>
                                </a>
                            </div>
                        </div>
                        <div class="" id="OtherSpecifyFormGroup" style="clear: both; padding-top: 15px;">
                            @Html.Label("otherSpecifyLabel", "Other Specify", new {@class = "col-sm-12"})
                            <div class="col-sm-12 modelChanged">
                                @Html.TextBox("otherSpecifyModel", "", new {@class = "form-control", id = "otherSpecifyModel"})
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-sm-6 col-xs-11 col1-control form-group" style="clear: both; float: left;">
                    <label class="col-sm-12" for="VehicleColor">Color:</label>
                    <div class="col-sm-12" style="margin-top: 8px;">
                        <select class="form-control" name="VehicleColor" id="VehicleColor">
                            @foreach (var color in Model.VehicleColors)
                            {
                                <option value="@color">@color</option>
                            }
                        </select>
                    </div>
                </div>


                <div class="col-sm-6 col-xs-11 col1-control form-group" style="float: left;">
                    <label class="col-sm-12" for="VehicleYear">Year:</label>
                    <div class="col-sm-12" style="margin-top: 8px;">
                        @Html.DropDownList("VehicleYear", Model.VehicleYears, new {@class = "form-control"})

                    </div>
                </div>




                <input type="hidden" id="workingTagId" value=""/>
                <input type="hidden" id="IssuingAuthority" value=""/>
                <input type="hidden" id="StateCode" value=""/>
                <input type="hidden" id="VehicleClass" value=""/>
                @*added label and checkbox to disable transponder*@
                <div class="col-sm-12 col-xs-12 col1-control form-group">
                    <div class="checkbox checkBoxStyle" style="padding-bottom: 15px">
                        <label id="TransponderStatusLbl" for="TransponderStatus" class='active'>
                            @Html.CheckBox("TransponderStatus", new {@style = "display: none"})
                            <i class="fa fa-square fa-2x"></i><i class="fa fa-check-square fa-2x"></i>
                            <span>
                                Temporarily deactivate this transponder
                            </span>
                        </label>
                    </div>

                </div>
            </div>
            <div class="modal-footer" style="border-top: 0; clear: both;">
                <button id="saveTransButton" type="button" class="btn btn-primary bootStrapButton">Save changes</button>
                <button id="deleteTransButton" class="btn btn-danger bootStrapButton2" type="button" data-target="#deleteConfirmationModal">
                    Delete Transponder
                </button>
                <button type="button" class="btn btn-info bootStrapButton2" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END OF EDIT TRANSPONDERS MODAL SECTION -->
<!-- Edit Replace MODAL SECTION -->
<div class="modal fade bs-example-modal-md editTransactions" id="ReplaceTransponders_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-refresh="false" transponder-role="replaceBuy" transData-licensePlateNumber="" transData-licensePlateState="">
    <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="EditTranspondersTitle">Replace Transponder</h4>
            </div>

            @Html.Partial("_ReplaceTransponder",
                new TRAILSWEB.Models.AddTransponderModel()
                {
                    TranspondersForPurchase = Model.TranspondersForPurchase,
                    Payment = Model.PaymentInfo,
                    StateCodes = null //No stateCode required for replace transponder functionality
                    //Model.StateCodes.Select(x => new SelectListItem() { Text = x.Value, Value = x.ID, Selected = (x.ID == defaultState) }).ToList()
                }
                )


        </div>
    </div>
</div>


<!-- END OF Replace TRANSPONDERS MODAL SECTION -->
<!-- Edit Add Transponder MODAL SECTION -->
<div class="modal fade bs-example-modal-md editTransactions" id="AddTransponder_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" data-refresh="false" transponder-role="add">
    <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="EditTranspondersTitle">Add Transponder</h4>
            </div>
            @Html.Partial("_AddTransponders",
                new TRAILSWEB.Models.AddTransponderModel()
                {
                    TranspondersForPurchase = Model.TranspondersForPurchase,
                    Payment = Model.PaymentInfo,
                    StateCodes = Model.StateCodes.Select(x => new SelectListItem() {Text = x.Value, Value = x.ID, Selected = (x.ID == defaultState)}).ToList()
                }
                )

        </div>
    </div>
</div>

<!-- END OF Add Transponder MODAL SECTION -->
<!-- Transponder Modal -->

<div id="transponderModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header info">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Where to find your Transponder Number</h4>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <p>Your Transponder Number will be listed on either the Sticker Tag or Portable Transponder you purchased.</p>
                    <div class="col-sm-6 col-xs-6">
                        <img src="~/Content/img/transponder_2_sticker.jpg" style="width: 100%"/>
                    </div>
                    <div class="col-sm-6 col-xs-6">
                        <img src="~/Content/img/transponder2_small-v2.jpg" style="width: 100%"/>
                    </div>
                </div>
            </div>
            <div class="modal-footer default">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<!-- // Transponder Modal -->
<!-- Confirm Delete Modal Dialog -->
<div id="deleteConfirmationModal" class="modal fade" role="dialog" aria-labelledby="confirmationTitle">
    <div class="modal-dialog" autoOpen="true">
        <div class="modal-content">
            <div class="modal-header warning default">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title" id="deleteConfirmationTitle">Delete Transponder <span id="deleteConfirmationId"></span></h4>

            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <p id="deleteConfirmationMessage">&nbsp;</p>
                    <p>Notice!</p>
                    <p>Transponders removed from an account become inactive immediately.</p>
                    <p>You will not be able to add the transponder back to you account without contacting the E-PASS Customer Service Center.</p>
                    <p>Once removed from your account, any further vehicle transactions using this/these transponder(s) will be treated as toll violations, so please make sure your last vehicle transactions have posted to your account, as additional fees and/or fines may result.</p>
                    <p>&nbsp;</p>
                    <p>I understand the information presented above and want to remove this/these transponder(s) from my account immediately.</p>
                </div>
            </div>
            <div class="modal-footer default">
                <button type="button" id="yesDeleteConfirmButton" class="btn btn-primary" data-dismiss="modal">Yes</button>
                <button type="button" id="noConfirmButton" class="btn btn-info" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div id="activateConfirmationModal" class="modal fade" role="dialog" aria-labelledby="confirmationTitle">
    <div class="modal-dialog">
        <div class="modal-content ">
            <div class="modal-header warning default">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title" id="activateConfirmationTitle">Activate Transponder <span id="activateConfirmationId"></span></h4>

            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <p id="activateConfirmationMessage">&nbsp;</p>
                    <p>Are you sure you want to activate this transponder? Please confirm.</p>
                </div>
            </div>
            <div class="modal-footer default">
                <button type="button" id="yesActivateConfirmButton" class="btn btn-primary" data-dismiss="modal">Yes</button>
                <button type="button" id="noActivateConfirmButton" class="btn btn-info" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div id="deactivateConfirmationModal" class="modal fade" role="dialog" aria-labelledby="confirmationTitle">
    <div class="modal-dialog">
        <div class="modal-content ">
            <div class="modal-header warning default">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title" id="deactivateeConfirmationTitle">Deactivate Transponder <span id="deactivateConfirmationId"></span></h4>

            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <p id="dactivateConfirmationMessage">&nbsp;</p>
                    <p>Are you sure you want to deactivate this transponder? Please confirm.</p>
                </div>
            </div>
            <div class="modal-footer default">
                <button type="button" id="yesDeactivateConfirmButton" class="btn btn-primary" data-dismiss="modal">Yes</button>
                <button type="button" id="noDeactivateConfirmButton" class="btn btn-info" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<!-- VIEW Pending Transaction MODAL SECTION -->
@if (Model.AccountInfo.HasPendingTransactions)
{
    <div class="modal fade bs-example-modal-lg" id="PendingPayment_Modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" style="z-index: 9999; overflow-y: scroll; -webkit-overflow-scrolling: touch;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="TollTransactionsTitle">Backlogged SunPass Toll Transactions</h4>
                    <h4 class="modal-title" id="TollTransactionsPreviewTitle" style="display: none">Backlogged SunPass Toll Transactions Review</h4>
                </div>
                <div class="modal-body">
                    @Html.Partial("_PayPendingTransactions", new PayPendingTransactions()
                    {
                        Payment = Model.PaymentInfo,
                        PendingTransactions = null,
                        StartDate = Model.AccountInfo.PendingTransactionsStart,
                        EndDate = Model.AccountInfo.PendingTransactionsEnd,
                        AccountBalence = Model.AccountInfo.AccountBalence.ToDecimal()
                    })
                </div>

            </div>
        </div>
    </div>
}
<!-- END OF VIEW Pending Transactions MODAL SECTION -->

<!-- END OF MODAL SECTION -->


<!-- Start Footer -->
<footer>
    @Html.Partial("_FooterStandard", new ViewDataDictionary(this.ViewData) {{"MasterPageSource", "Manage"}})
</footer>
<!-- // Footer -->
<!-- Modal Dialog Shell -->
<div id="modalDialog" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
        </div>
    </div>
</div>

<!-- Log Off Confirmation Dialog -->
@Html.Partial("LogOffConfirmationModal")
<!-- // Log Off Confirmation Dialog -->
<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="~/Scripts/vendor/ie-emulation-modes-warning.js"></script>
<script src="~/Scripts/vendor/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/vendor/jquery-migrate-1.4.1.min.js"></script>
<script src="~/Scripts/vendor/jquery.validate.min.js"></script>
<script src="~/Scripts/vendor/additional-methods.min.js"></script>
<script src="~/Scripts/vendor/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>


<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="~/Scripts/vendor/bootstrap/bootstrap.js"></script>


<!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
<script src="~/Scripts/vendor/bootstrap/ie10-viewport-bug-workaround.js"></script>

<!-- Bootstrap Plugins -->
<script src="~/Scripts/vendor/bootstrap/plugins/bootstrap-show-password.js"></script>
<script src="~/Scripts/vendor/bootstrap/plugins/bootstrap-notify.min.js"></script>
<script src="~/Scripts/vendor/bootstrap/plugins/bootstrap-toggle.min.js"></script>
<script src="~/Scripts/vendor/bootstrap/plugins/bootstrap-formhelpers.min.js"></script>
<script src="~/Scripts/vendor/bootstrap/plugins/bootbox.js"></script>

<!-- Spinner -->
<script src="~/Scripts/vendor/spin/spin.js"></script>
<script src="~/Scripts/vendor/spin/spin-config.js"></script>

<!-- Velocity Animation Library -->
<script src="~/Scripts/vendor/velocity/velocity.min.js"></script>
<script src="~/Scripts/vendor/velocity/velocity.ui.min.js"></script>

<script src="~/Scripts/vendor/AES.js"></script>
<script src="~/Scripts/Security.js"></script>

<script src="~/Scripts/vendor/jquery.cardcheck.js"></script>
<script src="~/Scripts/vendor/bootstrap/bootstrap-slider.js"></script>
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.9.0/bootstrap-slider.min.js"></script>*@


<script>
    // Call initiatePublicKey to get a public key for Encryption Modules
    //InitiatePublicKey();
    publicKey = CryptoJS.enc.Utf8.parse('@ViewBag.PublicKey');
</script>
<script src="~/Scripts/vendor/bootstrap/plugins/footable.js" type="text/javascript"></script>

<!-- App Scripts -->
<script type="text/javascript" src="~/Scripts/plugins.js"></script>
<script type="text/javascript" src="~/Scripts/helpers.js"></script>
<script type="text/javascript" src="~/Scripts/main.js"></script>
<script type="text/javascript" src="~/Scripts/SessionManager.js"></script>
<script type="text/javascript" src="~/Scripts/controllers/manage/manageController.js"></script>
<script type="text/javascript" src="~/Scripts/controllers/sales/cartController.js"></script>

<!-- App Partial Script loads -->
<script src="~/Scripts/vendor/incrementing.Numbers.js"></script>
<script src="~/Scripts/vendor/jquery.form.serializer.js"></script>
<script src="~/Scripts/vendor/jquery.serialize-object.js"></script>

<script type="text/javascript" src="~/Scripts/partialViews/_PreviewTransaction.js"></script>
<script type="text/javascript" src="~/Scripts/partialViews/_purchasepayableinfo.js"></script>

<script type="text/javascript">
    jQuery(function($) {
        $('.transpondersTable').footable();
        //$('.reportsTable').footable();
        //var today = new Date();
        //var d = today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear();
        //$("#financialTransactionsStartDate").datepicker( "setDate", d );       
        //$("#tollTransactionsStartDate").datepicker( "setDate", d );       

        @{
            var securityShowModalInd = "hide";
            var critAlertModalInd = "hide";

            if (@ViewBag.ShowSecurity)
            {
                securityShowModalInd = "show";
            }
            else if (@ViewBag.ShowAlerts)
            {
                critAlertModalInd = "show";
            }

            var navigationError = @Html.Raw(Json.Encode(Model.NavigationError));

        }



        $(document).ready(function() {

            showNavigationErrors('@navigationError');

            $('#AccountSecurity_Modal').modal('@securityShowModalInd');


            $('#Alert_Modal').modal('@critAlertModalInd');
        });

        $('#AccountSecurity_Modal').on('hide.bs.modal',
            function(e) {

                if ('@securityShowModalInd' == 'show') {
                    e.preventDefault();
                }

            });

        //Niraj: opens the confirmation dialog box for delete transponder
        $('#deleteTransButton').click(function() {
            $('#deleteConfirmationModal').modal('show');
            return false;
        });


        $('.transpondersTable').on('click',
            'td a.deleteTransRow',
            function() {
                var editRow = $(this).parents('tr');

            });

        $('#MonthlyEmailStatementType').val('@Model.AccountPreferences.MonthlyEmailStatementType').change();

        $('#contactState').val('@contactState').change();
        $('#SecurityQuestion').val('@securitySecretQuestion').change();
        if ($('#paymentAutoBill').is(':checked')) {
            //debugger;
            $('#repAmountRow').show();
            $('#requireRepAmountStar').show();
            $('#requireExpDateStar').show();
            $('#requireExpYearStar').show();

            $('#requireChangeCardStar').show();

            $('#lowAmountRow').show();
            $('#requireLowAmountStar').show();


            $('#lowAmountRowNo').hide();


        } else {
            $('#repAmountRow').hide();
            $('#requireRepAmountStar').hide();
            $('#requireExpDateStar').hide();
            $('#requireExpYearStar').hide();

            $('#requireChangeCardStar').hide();
            $('#lowAmountRow').hide();
            $('#requireLowAmountStar').hide();
            $('#lowAmountRowNo').show();


        }
        $('#paymentAutoBill').change(function() {
            //debugger;
            if (this.checked) {
                $('#repAmountRow').show();
                $('#requireRepAmountStar').show();
                $('#requireExpDateStar').show();
                $('#requireExpYearStar').show();

                $('#requireChangeCardStar').show();
                $('#lowAmountRow').show();
                $('#requireLowAmountStar').show();

                $('#lowAmountRowNo').hide();
            } else {
                $('#repAmountRow').hide();
                $('#requireRepAmountStar').hide();
                $('#requireExpDateStar').hide();
                $('#requireExpYearStar').hide();
                $('#requireChangeCardStar').hide();
                $('#lowAmountRow').hide();
                $('#requireLowAmountStar').hide();


                $('#lowAmountRowNo').show();
            }
        })
        if ($('#changeCardNumber').val().length > 1) {
            $('#changeCardNumber').prop('disabled', true);
        } else {
            $('#changeCardNumber').prop('disabled', false);
        }
        if ($('#ccYear').val() === '0001') {
            $('#ccYear').val('');
            $('#ccMonth').val('');
        }
    });

    /* BUTTON CLICK EVENT SUBSCRIPTIONS */

    $(function() {
        this.ManageUrl = '@Url.Action("Manage", "Post")';
        // Initialize Login Button Click Handler
        $('#saveContact').on('click',
            function(event) {

                var validForm = manageController.saveManageContact(event);

            });
        $('#savePaymentDetails').on('click',
            function(event) {

                var validForm = manageController.savePaymentDetails(event);

            });
        $('#savePreferences').on('click',
            function(event) {

                var validForm = manageController.saveManagePreferences(event);

            });
        $('#saveTransButton').on('click',
            function(event) {

                var validForm = manageController.updateTransponder(event);

            });
        $('.deleteTransRow').on('click',
            function(event) {

                var transId = $(this).data('id');
                $('#deleteConfirmationId').text(transId);

            });
        $('#yesDeleteConfirmButton').on('click',
            function(event) {

                var validForm = manageController.deleteTransponder(event);

            });
        $('#enableTransButton').on('click',
            function(event) {

                $('#EditTransponders_Modal').modal('hide');
                var transId = $('#workingTagId').val();
                $('#activateConfirmationId').text(transId);
                $('#activateConfirmationModal').modal('show');

            });
        $('#yesActivateConfirmButton').on('click',
            function(event) {

                var validForm = manageController.activateTransponder(event);

            });
        $('#noActivateConfirmButton').on('click',
            function(event) {


                $('#activateConfirmationModal').modal('hide');
                $('#EditTransponders_Modal').modal('show');
                var transId = '';
                $('#activateConfirmationId').text(transId);

            });
        $('#disableTransButton').on('click',
            function(event) {
                $('#EditTransponders_Modal').modal('hide');
                var transId = $('#workingTagId').val();
                $('#deactivateConfirmationId').text(transId);
                $('#deactivateConfirmationModal').modal('show');

            });
        $('#yesDeactivateConfirmButton').on('click',
            function(event) {

                var validForm = manageController.deactivateTransponder(event);

            });
        $('#noDeactivateConfirmButton').on('click',
            function(event) {

                $('#deactivateConfirmationModal').modal('hide');
                $('#EditTransponders_Modal').modal('show');
                var transId = '';
                $('#deactivateConfirmationId').text(transId);

            });
        $('#saveSecurity').on('click',
            function(event) {

                var validForm = manageController.saveManageSecurity(event);

            });


        $('#VehicleMake').on('change',
            function(event) {

            });

        $('#getTollTransactionsButton').on('click',
            function() {
                // Validate dates;                
                var start = new Date($('#tollTransactionsStartDate').val());
                var end = new Date($('#tollTransactionsEndDate').val());
                var diff = dateDiff(start, end);

                // Validate transponders.
                var transponders = 0;

                var ft = FooTable.get("#vehicleTransponderGrid");
                var checked = []
                for (var i = 0, l = ft.rows.all.length, row; i < l; i++) {
                    // the FooTable.Row object
                    row = ft.rows.all[i];
                    // but we want to work with DOM elements so to get access to the row use
                    checked.push(row.$el.find("input[type=checkbox]:checked").map(function() { return this.value })
                        .get())

                }

                checked = checked.filter(function(n) { return n[0] != undefined });

                transponders = checked.length;

                if (diff < 0) {
                    $('#tollTransactionsErrors').html("Please make sure end date is greater than start date.");

                    $('#tollTransactionsErrors').parent().addClass('open');
                    return;
                } else if (diff > 90) {
                    $('#tollTransactionsErrors').html("Please limit search to 90 days or less.");

                    $('#tollTransactionsErrors').parent().addClass('open');
                    return;
                } else if (transponders == 0) {
                    $('#tollTransactionsErrors').html("Please select at least one transponder.");

                    $('#tollTransactionsErrors').parent().addClass('open');
                    return;
                } else if (transponders > 3) {
                    $('#tollTransactionsErrors').html("Please limit search to 3 transponders or less.");

                    $('#tollTransactionsErrors').parent().addClass('open');
                    return;
                } else {
                    $('#tollTransactionsErrors').html("");

                    $('#tollTransactionsErrors').parent().removeClass('open');
                }

                var validForm = manageController.getTollTransactions();
            });

        $('#activitySummaryDownloadButton').on('click',
            function() {
                var validForm = manageController.downloadActivitySummary();
            });

        $('#activitySummaryEmailButton').on('click',
            function() {
                var validForm = manageController.emailActivitySummary();
            });

        $('#getMonthlyStatementsButton').on('click',
            function() {
                var validForm = manageController.downloadMonthlyStatement();
            });

        $('#emailMonthlyStatementsButton').on('click',
            function() {
                var validForm = manageController.emailMonthlyStatement();
            });

        $('#getFinancialApplyButton').on('click',
            function() {

                // Validate dates;
                var start = new Date($('#financialTransactionsStartDate').val());
                var end = new Date($('#financialTransactionsEndDate').val());
                var diff = dateDiff(start, end);

                if (isNaN(diff) || diff <= 0) {
                    $('#financialTransactionsErrors').html("Please make sure end date is greater than start date.");
                    $('#financialTransactionsErrors').parent().fadeIn();


                    return;
                } else if (diff > 365) {
                    $('#financialTransactionsErrors').html("Please limit search to 1 year.");
                    $('#financialTransactionsErrors').parent().fadeIn();


                    return;
                } else {
                    $('#financialTransactionsErrors').html("");

                    $('#financialTransactionsErrors').parent().fadeOut();
                }

                var validForm = manageController.getFinancialTransactions();

            });

        $('#getParkingApplyButton').on('click',
            function() {

                // Validate dates;
                var start = new Date($('#parkingTransactionsStartDate').val());
                var end = new Date($('#parkingTransactionsEndDate').val());
                var diff = dateDiff(start, end);

                // Validate transponders.
                var transponders = 0;

                var ft = FooTable.get("#parkingTransactionsVehicleSelection");
                var checked = []
                for (var i = 0, l = ft.rows.all.length, row; i < l; i++) {
                    // the FooTable.Row object
                    row = ft.rows.all[i];
                    // but we want to work with DOM elements so to get access to the row use
                    checked.push(row.$el.find("input[type=checkbox]:checked").map(function() { return this.value })
                        .get())

                }

                checked = checked.filter(function(n) { return n[0] != undefined });

                transponders = checked.length;

                if (diff < 0) {
                    $('#parkingTransactionsErrors').html("Please make sure end date is greater than start date.");
                    $('#parkingTransactionAlert').fadeIn();
                    return;
                } else if (diff > 90) {
                    $('#parkingTransactionsErrors').html("Please limit search to 90 days or less.");
                    $('#parkingTransactionAlert').fadeIn();
                    return;
                } else if (transponders == 0) {
                    $('#parkingTransactionsErrors').html("Please select at least one transponder.");
                    $('#parkingTransactionAlert').fadeIn();
                    return;
                } else if (transponders > 3) {
                    $('#parkingTransactionsErrors').html("Please limit search to 3 transponders or less.");
                    $('#parkingTransactionAlert').fadeIn();
                    return;
                } else {
                    $('#parkingTransactionsErrors').html("");
                    $('#parkingTransactionAlert').fadeOut();
                }
                var validForm = manageController.getParkingTransactions();
            });

        function dateDiff(start, end) {
            var one_day = 1000 * 60 * 60 * 24;
            var daysDiff = Math.ceil((end.getTime() - start.getTime()) / one_day);
            return daysDiff;
        }

        $('#submitPaymentHistory').on('click',
            function() {
                // check to make sure we have valid dates and the end date is not before the start date
                var startDate = $("#paymentHistoryStartDate").val();
                var endDate = $("#paymentHistoryEndDate").val();

                if (Date.parse(startDate) > Date.parse(endDate)) {
                    $.notify({
                            // Options
                            icon: 'fa fa-exclamation-triangle',
                            message:
                                'The Start Date cannot be greater than the End Date. Please review selected date range and try again.'
                        },
                        {
                            // Settings
                            type: 'danger',
                            delay: 5000,
                            z_index: 3000
                        });

                    return false;
                } else {
                    var validForm = manageController.getPaymentHistory();
                }
            });

        $('#deletePaymentButton').on('click',
            function() {
                var validForm = manageController.deleteCard();
            });

        $('#exportTollTransactionsButton').on('click',
            function() {
                var validForm = manageController.exportTollTransactions();
            });

        $('#pendingTransactionsButton').on('click',
            function(e) {
                var validForm = manageController.exportPendingTollTransactions(e);
            });

        $('#pendingTransactionReports').on('click',
            function(e) {
                var validForm = manageController.exportPendingTollTransactions(e, "PDF");
            });


        $('#emailPendingTransactionsButton').on('click',
            function() {
                var validForm = manageController.emailPendingTollTransactions();
            });


        $('#exportFinancialTransactionsButton').on('click',
            function() {
                var validForm = manageController.exportFinancialTransactions();
            });

        $('#exportParkingTransactionsButton').on('click',
            function() {
                var validForm = manageController.exportParkingTransactions();
            });

        $('#closeContactButton').on('click',
            function() {
                $('#updateContactForm')[0].reset();
                var validator = $('#updateContactForm').validate();
                validator.resetForm();
            });

        $('#closePaymentButton').on('click',
            function() {
                $('#updatePaymentForm')[0].reset();
                var validator = $('#updatePaymentForm').validate();
                validator.resetForm();
                if ($('#ccYear').val() === '0001') {
                    $('#ccYear').val('');
                    $('#ccMonth').val('');
                }
                if ($('#paymentAutoBill').is(':checked')) {
                    $('#repAmountRow').show();
                    $('#requireRepAmountStar').show();
                    $('#requireExpDateStar').show();
                    $('#requireExpYearStar').show();
                    $('#requireChangeCardStar').show();

                } else {
                    $('#repAmountRow').hide();
                    $('#requireRepAmountStar').hide();
                    $('#requireExpDateStar').hide();
                    $('#requireExpYearStar').hide();

                    $('#requireChangeCardStar').hide();
                }
            });

        $('#paymentAutoBill').change(function() {

            if ($('#updatePaymentForm').valid()) {
                $('#savePaymentDetails').prop('disabled', false);

            } else {
                $('#savePaymentDetails').prop('disabled', 'disabled');
            }

            /* END BUTTON CLICK EVENT SUBSCRIPTIONS */

        });
    });
</script>
<script src="~/Scripts/vendor/jquery.matchHeight-min.js"></script>
<script type="text/javascript">

    $(document).ready(function() {

        /** ACCOUNT SECURITY MODAL DATA CHANGED EVENTS **/
        $('#AccountSecurity_Modal input').each(function() {

            $(this).on('change',
                function() {
                    $('#AccountSecurity_Modal').data('touched', "true");
                });
        });

        $('#AccountSecurity_Modal select').each(function() {

            $(this).on('change',
                function() {
                    $('#AccountSecurity_Modal').data('touched', "true");
                });
        });

        $('.closeAccountSecurity').on('click',
            function() {
                if ($('#AccountSecurity_Modal').data('touched') == "true") {
                    //debugger;
                    var modalConfirm = bootbox.confirm({
                        message: "Are you sure you wish to close? Any unsaved changes will be lost.",
                        buttons: {
                            confirm: {
                                label: 'OK',
                                className: 'btn-primary'
                            },
                            cancel: {
                                label: 'Cancel',
                                className: 'btn-default'
                            }
                        },
                        show: false,
                        callback: function(result) {
                            if (result == true) {
                                $("#AccountSecurity_Modal").modal("hide");
                            } else {
                                $("body").addClass("modal-open");
                            }
                        }
                    });

                    modalConfirm.on("hidden.bs.modal",
                        function(e) {
                            if ($('.modal').hasClass('in')) {
                                $('body').addClass('modal-open');
                            }
                        });
                    modalConfirm.modal("show");
                    /*
                    return bootbox.confirm("Are you sure you wish to close? Any unsaved changes will be lost.",
                        function(result){ if (result == true) 
                        { $("#AccountSecurity_Modal").modal("hide"); }
                        else
                        {
                          $("body").addClass("modal-open");
                        }
                        });*/
                } else {
                    // Close Modal
                    $("#AccountSecurity_Modal").modal("hide");
                }
            });


        /** ACCOUNT SETTINGS MODAL DATA CHANGED EVENTS **/
        $('#AccountSettings_Modal input').each(function() {

            $(this).on('change',
                function() {
                    $('#AccountSettings_Modal').data('touched', "true");
                });
        });

        $('#AccountSettings_Modal select').each(function() {

            $(this).on('change',
                function() {
                    $('#AccountSettings_Modal').data('touched', "true");
                });
        });

        $('.closeAccountSettings').on('click',
            function() {
                if ($('#AccountSettings_Modal').data('touched') == "true") {
                    return bootbox.confirm("Are you sure you wish to close? Any unsaved changes will be lost.",
                            function(result) {
                                if (result == true) {
                                    $("#AccountSettings_Modal").modal("hide");
                                };
                            })
                        .init(function() { alert('hide'); });
                } else {
                    // Close Modal
                    $("#AccountSettings_Modal").modal("hide");
                }
            });

        /** ACCOUNT SETTINGS MODAL DATA CHANGED EVENTS **/
        //$('#AccountSettings_Modal input').each(function () {

        //    $(this).on('change', function () {
        //        $('#AccountSettings_Modal').data('touched', "true");
        //    });
        //});

        //$('#AccountSettings_Modal select').each(function () {

        //    $(this).on('change', function () {
        //        $('#AccountSettings_Modal').data('touched', "true");
        //    });
        //});

        /** CUSTOMER MODAL DATA CHANGED EVENTS **/
        $('#Customer_Modal input').each(function() {

            $(this).on('change',
                function() {
                    $('#Customer_Modal').data('touched', "true");
                });
        });

        $('#Customer_Modal select').each(function() {

            $(this).on('change',
                function() {
                    $('#Customer_Modal').data('touched', "true");
                });
        });

        $('#Customer_Modal_CloseButton').on('click',
            function() {
                if ($('#Customer_Modal').data('touched') == "true") {
                    return bootbox.confirm("Are you sure you wish to close? Any unsaved changes will be lost.",
                        function(result) {
                            if (result == true) {
                                $("#Customer_Modal").modal("hide");
                            };
                        });
                } else {
                    // Close Modal
                    $("#Customer_Modal").modal("hide");
                }
            });

        /** CONTACT MODAL DATA CHANGED EVENTS **/
        $('#Contact_Modal input').each(function() {

            $(this).on('change',
                function() {
                    $('#Contact_Modal').data('touched', "true");
                });
        });

        $('#Contact_Modal select').each(function() {

            $(this).on('change',
                function() {
                    $('#Contact_Modal').data('touched', "true");
                });
        });

        $('.closeContact').on('click',
            function() {
                if ($('#Contact_Modal').data('touched') == "true") {
                    return bootbox.confirm("Are you sure you wish to close? Any unsaved changes will be lost.",
                        function(result) {
                            if (result == true) {
                                $("#Contact_Modal").modal("hide");
                            };
                        });
                } else {
                    // Close Modal
                    $("#Contact_Modal").modal("hide");
                }
            });

        /** PAYMENT MODAL DATA CHANGED EVENTS **/
        $('#Payment_Modal input').each(function() {

            $(this).on('change',
                function() {
                    $('#Payment_Modal').data('touched', "true");
                });
        });

        $('#Payment_Modal select').each(function() {

            $(this).on('change',
                function() {
                    $('#Payment_Modal').data('touched', "true");
                });
        });

        $('.closePayment').on('click',
            function() {
                if ($('#Payment_Modal').data('touched') == "true") {
                    return bootbox.confirm("Are you sure you wish to close? Any unsaved changes will be lost.",
                        function(result) {
                            if (result == true) {
                                $("#Payment_Modal").modal("hide");
                            };
                        });
                } else {
                    // Close Modal
                    $("#Payment_Modal").modal("hide");
                }
            });

    });


    $("#orderNewTranspondersButton").on('click',
        function() {
            manageController.previewAndGetCartTransponder();

            manageController.reviewNewTransponder();

            //addTransponderReviewPanel
            //addTransponderEditPanel
        });

    /* DATE FIELDS VALIDATION */


    $(function() {
        $('.box').matchHeight();
    });

    /** MODAL SHOW EVENT HANDLERS TO CLEAR DATA */

    // Transponder
    /*$('#transponderModal').on('show.bs.modal', function (e) {
        setTimeout(function () {
            var transponderType = $(e.relatedTarget).attr('data-type');
            var transponderPrice = $(e.relatedTarget).attr('data-price');
            var transponderDescription = $(e.relatedTarget).attr('data-description');

            transponderPrice = (transponderPrice == "0") ? "FREE" : '$' + transponderPrice;

            $('#transponderShortDescription').text(transponderDescription);
            $('#transponderPrice').text(transponderPrice);

            var productUrl = $('#productDetails').attr('href').replace('0', transponderType);

            // Set Product Path
            $('#productDetails').attr('href', productUrl);

            var transponderImage = $(e.relatedTarget).find('img');
            var transponderImageSrc = $(transponderImage).attr('src');

            //$('#transponderImage').replaceWith($(e.relatedTarget).find('img').clone()).attr('id', 'transponderImage');
            $('#transponderImage').attr('src', transponderImageSrc);
            $('#transponderImage').attr('alt', transponderDescription);
            $('#transponderImage').attr('title', transponderDescription);
        }, 250);
    });
    */
    // Payment History
    $('#PaymentHistory_Modal').on('show.bs.modal',
        function() {

            document.getElementById('paymentHistoryStartDate').value = "";
            document.getElementById('paymentHistoryEndDate').value = "";
            $('#paymentHistoryErrors').html('');

        });


    // Toll Transactions
    $('#TollTransactions_Modal').on('show.bs.modal',
        function() {
            document.getElementById("tollTransactionsErrorMessage").style.display = "none";
            document.getElementById('tollTransactionsStartDate').value = "";
            document.getElementById('tollTransactionsEndDate').value = "";
            $('.tollTransactionsTable').html('');
            $('.transponderTollTransactions').each(function() {
                this.checked = false;
            });
            $('#parkingTransactionsErrors').html('');
            document.getElementById("tollTransactionsExport").style.display = "none";

            $(".transponderTollTransactions").on("change",
                function() {
                    function hasValue(elem) {
                        return $(elem).filter(function() { return $(this).val(); }).length > 0;
                    }

                    // Enable or Disable "Apply" Button based on required state
                    // NOTE: For now, just check whether or not at least one vehicle is selected
                    var startDate = $("#tollTransactionsStartDate").val();
                    var endDate = $("#tollTransactionsEndDate").val();

                    if (($("input.transponderTollTransactions:checkbox:checked").length > 0) &&
                        startDate != "" &&
                        endDate != "") {
                        $("#getTollTransactionsButton").removeAttr("disabled");
                    } else {
                        $("#getTollTransactionsButton").attr("disabled", true);
                    }
                });
        });

    /// Financial Transactions
    $('#FinancialTransactions_Modal').on('show.bs.modal',
        function() {

            document.getElementById('financialTransactionsStartDate').value = "";
            document.getElementById('financialTransactionsEndDate').value = "";
            $('.tableFinancialTransactions').html('');
            document.getElementById("financialTransactionsExport").style.display = "none";
            $('#financialTransactionsErrors').html('');
        });


    // Parking Transactions
    $('#ParkingTransactions_Modal').on('show.bs.modal',
        function() {

            var minDate = new Date();
            minDate.setMonth(minDate.getMonth() - 3);
            document.getElementById('parkingTransactionsEndDate').value = "";
            $('.tableParkingTransactions').html('');
            $('.transponderParkingTransactions').each(function() {
                this.checked = false;
            });
            $('#parkingTransactionsErrors').html('');
            document.getElementById("parkingTransactionsExport").style.display = "none";
        });
    $('#updateSecurityForm').validate({
        rules: {
            newUsername1: {
                maxlength: 100

            },
            securityEmail1: {
                maxlength: 100

            },
            newPass1: {
                maxlength: 30

            },
            SecretQuestion: {
                selectcheck: true
            },
            SecretAnswer: {
                minlength: 2,
                maxlength: 30
            }
        },
        messages: {
            newUsername1: {
                maxlength: 'This field can not exceed more than {0} characters',
                required: 'This field is required.'
            },
            securityEmail1: {
                maxlength: 'This field can not exceed more than {0} characters'
            },
            newPass1: {
                maxlength: 'This field can not exceed more than {0} characters',
                required: 'This field is required.'
            },
            SecretQuestion: {
                selectcheck: 'A valid State is required.'
            },
            SecretAnswer: {
                minlength: 'This field must contain at least {0} characters',
                maxlength: 'This field can not exceed more than {0} characters',
                required: 'This field is required.'
            }
        },
        highlight: function(element) {
            $(element).closest('.form-group').addClass('has-error');
        },
        unhighlight: function(element) {
            $(element).closest('.form-group').removeClass('has-error');
        },
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function(error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        }
    });

    $('#updateContactForm').validate({
        rules: {
            contactAddressLine1: {
                minlength: 2,
                maxlength: 100,
                required: true
            },
            contactAddressLine2: {
                minlength: 2,
                maxlength: 100
            },
            contactCity: {
                minlength: 2,
                maxlength: 30,
                required: true
            },
            contactState: {
                selectcheck: true
            },
            contactZip: {
                minlength: 5,
                maxlength: 5,
                digits: true,
                required: true
            },
            contactDayPhone: {
                phoneUS: true,
                required: true
            },
            contactDayPhoneExt: {
                digits: true,
                required: false
            },
            contactEveningPhone: {
                phoneUS: true,
                required: false
            }
        },
        messages: {
            contactAddressLine1: {
                minlength: 'This field must contain at least {0} characters',
                maxlength: 'This field can not exceed more than {0} characters',
                required: 'This field is required.'
            },
            contactAddressLine2: {
                minlength: 'This field must contain at least {0} characters',
                maxlength: 'This field can not exceed more than {0} characters'
            },
            contactCity: {
                minlength: 'This field must contain at least {0} characters',
                maxlength: 'This field can not exceed more than {0} characters',
                required: 'This field is required.'
            },
            contactState: {
                selectcheck: 'A valid State is required.'
            },
            contactZip: {
                minlength: 'This field must contain at least {0} characters',
                maxlength: 'This field can not exceed more than {0} characters',
                digits: 'This field can only contain numbers',
                required: 'This field is required.'
            }
        },
        highlight: function(element) {
            $(element).closest('.form-group').addClass('has-error');
        },
        unhighlight: function(element) {
            $(element).closest('.form-group').removeClass('has-error');
        },
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function(error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        }
    });
    $.validator.addMethod('expiredate',
        function(value, element, params) {
            var minMonth = new Date().getMonth() + 1;
            var minYear = new Date().getFullYear();
            var month = parseInt($(params.month).val(), 10);
            var year = parseInt($(params.year).val(), 10);

            return (this.optional(element) || year > minYear || (year === minYear && month >= minMonth));
        },
        'Date entered is expired');
    var initialAutoBill = $('#paymentAutoBill').is(':checked');
    $('#updatePaymentForm').validate({
        rules: {
            changeCardNumber: {
                digits: true,
                required: function() {
                    if ($('#paymentAutoBill').is(':checked')) {
                        return true;
                    } else {
                        return false;
                    }
                },
                creditcard: true
            },
            ccYear: {
                minlength: 4,
                maxlength: 4,
                digits: true,
                expiredate: {
                    month: '#ccMonth',
                    year: '#ccYear'
                },
                required: function() {
                    return $('#changeCardNumber').val().length > 0
                }
            },
            ccMonth: {
                minlength: 1,
                maxlength: 2,
                min: 1,
                max: 12,
                digits: true,
                required: function() {
                    return $('#changeCardNumber').val().length > 0
                }
            },

            paymentRepAmount: {
                digits: true,
                min: {
                    param: @Html.Raw(@minPaymentCardReplenishAmount),
                    depends: function(element) {
                        //debugger;
                        var test1 = $('#paymentAutoBill').is(':checked') && initialAutoBill;
                        return (!(test1) ||
                        ($(element).val() !== $('#paymentRepAmountOrig').val() ||
                            $('#paymentRepAmountOrig').val() == 0));
                    }
                },
                required: function(element) {
                    //debugger;
                    if ($('#paymentAutoBill').is(':checked')) {
                        return ($(element).val() !== $('#paymentLowAmountOrig').val());
                    } else {
                        return false;
                    }

                }
            },

            paymentLowAmount: {
                digits: true,
                min: {
                    param: @Html.Raw(@minPaymentCardLowBalance),
                    depends: function(element) {
                        return ($(element).val() !== $('#paymentLowAmountOrig').val() ||
                            $('#paymentLowAmountOrig').val() == 0);
                    }
                },
                required: function(element) {
                    return ($(element).val() !== $('#paymentLowAmountOrig').val());
                }
            }
        },
        messages: {
            changeCardNumber: {
                required: 'This field is required.'
            },
            ccYear: {
                minlength: 'This field must contain at least {0} characters',
                maxlength: 'This field can not exceed more than {0} characters',
                required: 'This field is required.'
            },
            ccMonth: {
                minlength: 'This field must contain at least {0} characters',
                maxlength: 'This field can not exceed more than {0} characters',
                required: 'This field is required.'
            },
            paymentRepAmount: {
                min: 'Minimum amount $@Html.Raw(@minPaymentCardReplenishAmount)'
            },
            paymentLowAmount: {
                min: 'Minimum amount $@Html.Raw(@minPaymentCardLowBalance)',
                digits: 'This field can only contain numbers',
                required: 'This field is required.'
            }
        },
        highlight: function(element) {
            $(element).closest('.form-group').addClass('has-error');
        },
        unhighlight: function(element) {
            $(element).closest('.form-group').removeClass('has-error');
        },
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function(error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element.siblings().last()); //This is important as CC type will be display in line
            }
        }
    });

    $('#updatePaymentForm input').on('keyup blur',
        function() {
            if ($('#updatePaymentForm').valid()) {
                $('#savePaymentDetails').prop('disabled', false);
            } else {
                $('#savePaymentDetails').prop('disabled', 'disabled');
            }
        });
    $('#updateContactForm input').on('keyup blur',
        function() {
            if ($('#updateContactForm').valid()) {
                $('#saveContact').prop('disabled', false);
            } else {
                $('#saveContact').prop('disabled', 'disabled');
            }
        });
    $('#updateContactForm select').on('change',
        function() {
            if ($('#updateContactForm').valid()) {
                $('#saveContact').prop('disabled', false);
            } else {
                $('#saveContact').prop('disabled', 'disabled');
            }
        });

</script>

<!-- Google Analytics -->
<script>
    (function(i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] ||
            function() {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date();
        a = s.createElement(o),
            m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-71473508-1', 'auto', { 'allowLinker': true });
    ga('send', 'pageview');
    ga('require', 'linker');
    ga('linker:autoLink', ['cfxway.com']);


    @if (ViewBag.AnalyticsEcommerceScript != null)
    {
        // Google Analytics Ecommerce Analytics Script
        @Html.Raw(ViewBag.AnalyticsEcommerceScript)
    }
</script>

<script type="text/javascript">
    $(function() {
        @{
            <text>
                sessionEndNoCart = "@sessionMessageNoCart";
                sessionEndWithCart = "@sessionMessageWithCart";
            </text>
        }

        @if (Session["Cart"] != null)
        {
            var cart = (List<Cart>) Session["Cart"];
            var itemCount = cart.Where(i => i.VehicleInfo.StatusCode == "P").Count();

            if (itemCount > 0)
            {
                <text>
                    sessionEndMessage = sessionEndWithCart;
                </text>
            }
            else
            {
                <text>
                    sessionEndMessage = sessionEndNoCart;
                </text>
            }
        }
        else
        {
            <text>
                sessionEndMessage = sessionEndNoCart;
            </text>
        }

        $('#yesConfirmButton')
            .click(function(event) {
                event.preventDefault();

                // Close Confirmation Dialog
                $('#logOffConfirmationModal').modal('hide');

                var endSessionUrl = null;

                @{
                    <text>
                        endSessionUrl = "@Url.Action("LogOff", "Account")";
                    </text>
                }
                // Perform Log Off
                window.parent.location = endSessionUrl;
            });

        $('.confirm-exit')
            .click(function(event) {
                event.preventDefault();

                $('#logOffConfirmationMessage').text(sessionEndMessage);
            });

        //Below code will reset z-index for overlaying dialogs
        //This is important to bring new model on top of existing one
        $(document).on('show.bs.modal',
            '.modal',
            function(event) {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function() {
                        $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                    },
                    0);
            });


        //debugger;
        //This script will resolved Checkbox issue in IE
        $('.useCardOnFileSelection').prop('checked', "@Model.PaymentInfo.UseCardOnFile" == "True");


        $('LocalPopupOnPage').editSummary({
            callback: function(result) {
                if (result.EditAction == 'payment') {
                    $(".transactionReviewPanel").hide();
                    $(".transactionEditPanel").show();
                } else if (result.EditAction == 'order') {
                    $(".transactionReviewPanel").hide();
                    $(".transactionEditPanel").show();
                }
            }

        });

    });


    //Event to trigger when Add Transponder clicks and modal appears
    $('#AddTransponder_Modal').on('show.bs.modal',
        function() {
            var template = $('#addTransponderBodyTemplate').clone();
            template.removeClass('hidden');
            $("#addTransponderBodyPanel").html("");
            $("#addTransponderBodyPanel").html(template.html());

            $('.useCardOnFileSelection').prop('checked', "@Model.PaymentInfo.UseCardOnFile" == "True");

            //$("#txtname").focus();
        });

    //Event to trigger when Add Transponder clicks and modal appears
    $('#AddTransponder_Modal').on('hide.bs.modal',
        function(event) {
            var dataRefreshed = $('#AddTransponder_Modal').attr("data-refresh");
            if (dataRefreshed == "false" || dataRefreshed == false)
                $("#addTransponderBodyPanel").html("");
            else
                location.reload();
        });

    //Event to trigger when Replace Transponder clicks and modal appears
    $('#ReplaceTransponders_Modal').on('show.bs.modal',
        function() {
            var template = $('#replaceTransponderBodyTemplate').clone();
            template.removeClass('hidden');
            $("#replaceTransponderBodyPanel").html("");
            $("#replaceTransponderBodyPanel").html(template.html());

            $('.useCardOnFileSelection').prop('checked', "@Model.PaymentInfo.UseCardOnFile" == "True");
            $(this).attr('transponder-role', 'replaceBuy');
            //transponder-role

        });

    //Event to trigger when Add Transponder clicks and modal appears
    $('#ReplaceTransponders_Modal').on('hide.bs.modal',
        function(event) {
            var dataRefreshed = $('#ReplaceTransponders_Modal').attr("data-refresh");
            if (dataRefreshed == "false" || dataRefreshed == false)
                $("#replaceTransponderBodyPanel").html("");
            else
                location.reload();
        });


    $("#OtherSpecifyFormGroup").hide();
    $("#VehicleModel").change(function() {
        var value = $(this).val();
        if (value == "Other" || value == "OTHER") {
            $("#OtherSpecifyFormGroup").show();
            $("#otherSpecifyModel").focus();
        } else {
            $("#OtherSpecifyFormGroup").hide();
        }
    });


    $(document).ready(function() {
        var baseUrl = getBaseUrl();
        console.log("base value url " + baseUrl);
        // Toll transactions
        $("#tollTransactionsStartDate").datepicker({
            showOn: "button",
            buttonImage: baseUrl + "/Content/img/new/calendarIcon.png",
            minDate: -89,
            maxDate: +0,
            buttonImageOnly: true,
            onSelect: function() {
                if ($("#tollTransactionsStartDate").val() == null || $("#tollTransactionsStartDate").val() == "") {
                    $("#getTollTransactionsButton").attr("disabled", "");
                }
            }
        });

        $("#tollTransactionsEndDate").datepicker({
            showOn: "button",
            buttonImage: baseUrl + "/Content/img/new/calendarIcon.png",
            minDate: -89,
            maxDate: +0,
            buttonImageOnly: true,
            onSelect: function() {
                if (($("#tollTransactionsStartDate").val() != null || $("#tollTransactionsStartDate").val() != "") &&
                    ($("#tollTransactionsEndDate").val() != null || $("#tollTransactionsEndDate").val() != "") &&
                    ($("input.transponderTollTransactions:checkbox:checked").length > 0)) {
                    $("#getTollTransactionsButton").removeAttr("disabled");
                } else {
                    $("#getTollTransactionsButton").attr("disabled", "");
                }
            }
        });

        // Financial transactions
        $("#financialTransactionsStartDate").datepicker({
            showOn: "button",
            buttonImage: baseUrl + "/Content/img/new/calendarIcon.png",
            minDate: -364,
            maxDate: +0,
            buttonImageOnly: true,
        });

        $("#financialTransactionsEndDate").datepicker({
            showOn: "button",
            buttonImage: baseUrl + "/Content/img/new/calendarIcon.png",
            minDate: -364,
            maxDate: +0,
            buttonImageOnly: true,
        });

        // Parking Transactions
        $("#parkingTransactionsStartDate").datepicker({
            showOn: "button",
            buttonImage: baseUrl + "/Content/img/new/calendarIcon.png",
            minDate: -89,
            maxDate: +0,
            buttonImageOnly: true,
        });

        $("#parkingTransactionsEndDate").datepicker({
            showOn: "button",
            buttonImage: baseUrl + "/Content/img/new/calendarIcon.png",
            minDate: -89,
            maxDate: +0,
            buttonImageOnly: true,
        });

        $('.helpPopOnTop').popover({
            placement: 'top',
            html: true,
            trigger: 'hover',
            delay: {
                show: "500",
                hide: "100"
            }
        });

        if ('@Model.AccountInfo.HasPendingTransactions' == 'True') {
            debugger;

            $("#pendingTransEndDate").datepicker({
                showOn: "button",
                buttonImage: baseUrl + "/Content/img/new/calendarIcon.png",
                minDate: @((Model.AccountInfo.PendingTransactionsStart.Date - DateTime.Now.Date).Days),
                maxDate: @((Model.AccountInfo.PendingTransactionsEnd.Date - DateTime.Now.Date).Days),
                buttonImageOnly: true,
                onSelect: function() {

                    var start = new Date('@Model.AccountInfo.PendingTransactionsStart.Date.ToShortDateString()');
                    var end = new Date($('#pendingTransEndDate').val());

                    var diff = (end - start) / (1000 * 60 * 60 * 24);

                    manageController.FilterPendingTransactionsDays(@minPendingTranCount, diff);

                }
            });

            manageController.WebBalance = @webBalance;
            manageController.CreatePendingTransactionSlider(@minPendingTranCount, @maxPendingTranCount,
                '@minPendingTranDate',
                '@Model.AccountInfo.PendingTransactionsEnd')
            //tollAmountSelected
        }

    });
</script>
</body>
</html>
